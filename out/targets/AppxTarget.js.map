{"version":3,"sources":["../../src/targets/AppxTarget.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\r\nimport { Arch, asArray, deepAssign, InvalidConfigurationError, log } from \"builder-util\"\r\nimport { copyOrLinkFile, walk } from \"builder-util/out/fs\"\r\nimport { emptyDir, readdir, readFile, writeFile } from \"fs-extra-p\"\r\nimport * as path from \"path\"\r\nimport { AppXOptions } from \"../\"\r\nimport { getSignVendorPath, isOldWin6 } from \"../codeSign/windowsCodeSign\"\r\nimport { Target } from \"../core\"\r\nimport { getTemplatePath } from \"../util/pathManager\"\r\nimport { VmManager } from \"../vm/vm\"\r\nimport { WinPackager } from \"../winPackager\"\r\nimport { createStageDir } from \"./targetUtil\"\r\n\r\nconst APPX_ASSETS_DIR_NAME = \"appx\"\r\n\r\nconst vendorAssetsForDefaultAssets: { [key: string]: string; } = {\r\n  \"StoreLogo.png\": \"SampleAppx.50x50.png\",\r\n  \"Square150x150Logo.png\": \"SampleAppx.150x150.png\",\r\n  \"Square44x44Logo.png\": \"SampleAppx.44x44.png\",\r\n  \"Wide310x150Logo.png\": \"SampleAppx.310x150.png\",\r\n}\r\n\r\nconst DEFAULT_RESOURCE_LANG = \"en-US\"\r\n\r\nexport default class AppXTarget extends Target {\r\n  readonly options: AppXOptions = deepAssign({}, this.packager.platformSpecificBuildOptions, this.packager.config.appx)\r\n\r\n  constructor(private readonly packager: WinPackager, readonly outDir: string) {\r\n    super(\"appx\")\r\n\r\n    if (process.platform !== \"darwin\" && (process.platform !== \"win32\" || isOldWin6())) {\r\n      throw new Error(\"AppX is supported only on Windows 10 or Windows Server 2012 R2 (version number 6.3+)\")\r\n    }\r\n  }\r\n\r\n  // https://docs.microsoft.com/en-us/windows/uwp/packaging/create-app-package-with-makeappx-tool#mapping-files\r\n  async build(appOutDir: string, arch: Arch): Promise<any> {\r\n    const packager = this.packager\r\n    const artifactName = packager.expandArtifactBeautyNamePattern(this.options, \"appx\", arch)\r\n    const artifactPath = path.join(this.outDir, artifactName)\r\n    await packager.info.callArtifactBuildStarted({\r\n      targetPresentableName: \"AppX\",\r\n      file: artifactPath,\r\n      arch,\r\n    })\r\n\r\n    const vendorPath = await getSignVendorPath()\r\n    const vm = await packager.vm.value\r\n\r\n    const stageDir = await createStageDir(this, packager, arch)\r\n\r\n    const mappingFile = stageDir.getTempFile(\"mapping.txt\")\r\n    const makeAppXArgs = [\"pack\", \"/o\" /* overwrite the output file if it exists */,\r\n      \"/f\", vm.toVmFile(mappingFile),\r\n      \"/p\", vm.toVmFile(artifactPath),\r\n    ]\r\n    if (packager.compression === \"store\") {\r\n      makeAppXArgs.push(\"/nc\")\r\n    }\r\n\r\n    const mappingList: Array<Array<string>> = []\r\n    mappingList.push(await BluebirdPromise.map(walk(appOutDir), file => {\r\n      let appxPath = file.substring(appOutDir.length + 1)\r\n      if (path.sep !== \"\\\\\") {\r\n        appxPath = appxPath.replace(/\\//g, \"\\\\\")\r\n      }\r\n      return `\"${vm.toVmFile(file)}\" \"app\\\\${appxPath}\"`\r\n    }))\r\n\r\n    const userAssetDir = await this.packager.getResource(undefined, APPX_ASSETS_DIR_NAME)\r\n    const assetInfo = await AppXTarget.computeUserAssets(vm, vendorPath, userAssetDir)\r\n    const userAssets = assetInfo.userAssets\r\n\r\n    const manifestFile = stageDir.getTempFile(\"AppxManifest.xml\")\r\n    await this.writeManifest(manifestFile, arch, await this.computePublisherName(), userAssets)\r\n    mappingList.push(assetInfo.mappings)\r\n    mappingList.push([`\"${vm.toVmFile(manifestFile)}\" \"AppxManifest.xml\"`])\r\n\r\n    if (isScaledAssetsProvided(userAssets)) {\r\n      const outFile = vm.toVmFile(stageDir.getTempFile(\"resources.pri\"))\r\n      const makePriPath = vm.toVmFile(path.join(vendorPath, \"windows-10\", Arch[arch], \"makepri.exe\"))\r\n\r\n      const assetRoot = stageDir.getTempFile(\"appx/assets\")\r\n      await emptyDir(assetRoot)\r\n      await BluebirdPromise.map(assetInfo.allAssets, it => copyOrLinkFile(it, path.join(assetRoot, path.basename(it))))\r\n\r\n      await vm.exec(makePriPath, [\"new\",\r\n        \"/Overwrite\",\r\n        \"/Manifest\", vm.toVmFile(manifestFile),\r\n        \"/ProjectRoot\", vm.toVmFile(path.dirname(assetRoot)),\r\n        \"/ConfigXml\", vm.toVmFile(path.join(getTemplatePath(\"appx\"), \"priconfig.xml\")),\r\n        \"/OutputFile\", outFile,\r\n      ])\r\n\r\n      // in addition to resources.pri, resources.scale-140.pri and other such files will be generated\r\n      for (const resourceFile of (await readdir(stageDir.dir)).filter(it => it.startsWith(\"resources.\")).sort()) {\r\n        mappingList.push([`\"${vm.toVmFile(stageDir.getTempFile(resourceFile))}\" \"${resourceFile}\"`])\r\n      }\r\n      makeAppXArgs.push(\"/l\")\r\n    }\r\n\r\n    let mapping = \"[Files]\"\r\n    for (const list of mappingList) {\r\n      mapping += \"\\r\\n\" + list.join(\"\\r\\n\")\r\n    }\r\n    await writeFile(mappingFile, mapping)\r\n    packager.debugLogger.add(\"appx.mapping\", mapping)\r\n\r\n    if (this.options.makeappxArgs != null) {\r\n      makeAppXArgs.push(...this.options.makeappxArgs)\r\n    }\r\n    await vm.exec(vm.toVmFile(path.join(vendorPath, \"windows-10\", Arch[arch], \"makeappx.exe\")), makeAppXArgs)\r\n    await packager.sign(artifactPath)\r\n\r\n    await stageDir.cleanup()\r\n\r\n    await packager.info.callArtifactBuildCompleted({\r\n      file: artifactPath,\r\n      packager,\r\n      arch,\r\n      safeArtifactName: packager.computeSafeArtifactName(artifactName, \"appx\"),\r\n      target: this,\r\n      isWriteUpdateInfo: this.options.electronUpdaterAware,\r\n    })\r\n  }\r\n\r\n  private static async computeUserAssets(vm: VmManager, vendorPath: string, userAssetDir: string | null) {\r\n    const mappings: Array<string> = []\r\n    let userAssets: Array<string>\r\n    const allAssets: Array<string> = []\r\n    if (userAssetDir == null) {\r\n      userAssets = []\r\n    }\r\n    else {\r\n      userAssets = (await readdir(userAssetDir)).filter(it => !it.startsWith(\".\") && !it.endsWith(\".db\") && it.includes(\".\"))\r\n      for (const name of userAssets) {\r\n        mappings.push(`\"${vm.toVmFile(userAssetDir)}${vm.pathSep}${name}\" \"assets\\\\${name}\"`)\r\n        allAssets.push(path.join(userAssetDir, name))\r\n      }\r\n    }\r\n\r\n    for (const defaultAsset of Object.keys(vendorAssetsForDefaultAssets)) {\r\n      if (userAssets.length === 0 || !isDefaultAssetIncluded(userAssets, defaultAsset)) {\r\n        const file = path.join(vendorPath, \"appxAssets\", vendorAssetsForDefaultAssets[defaultAsset])\r\n        mappings.push(`\"${vm.toVmFile(file)}\" \"assets\\\\${defaultAsset}\"`)\r\n        allAssets.push(file)\r\n      }\r\n    }\r\n\r\n    // we do not use process.arch to build path to tools, because even if you are on x64, ia32 appx tool must be used if you build appx for ia32\r\n    return {userAssets, mappings, allAssets}\r\n  }\r\n\r\n  // https://github.com/electron-userland/electron-builder/issues/2108#issuecomment-333200711\r\n  private async computePublisherName() {\r\n    if (await this.packager.cscInfo.value == null) {\r\n      log.info({reason: \"Windows Store only build\"}, \"AppX is not signed\")\r\n      return this.options.publisher || \"CN=ms\"\r\n    }\r\n\r\n    const certInfo = await this.packager.lazyCertInfo.value\r\n    const publisher = certInfo == null ? null : certInfo.bloodyMicrosoftSubjectDn\r\n    if (publisher == null) {\r\n      throw new Error(\"Internal error: cannot compute subject using certificate info\")\r\n    }\r\n    return publisher\r\n  }\r\n\r\n  private async writeManifest(outFile: string, arch: Arch, publisher: string, userAssets: Array<string>) {\r\n    const appInfo = this.packager.appInfo\r\n    const options = this.options\r\n    const executable = `app\\\\${appInfo.productFilename}.exe`\r\n    const displayName = options.displayName || appInfo.productName\r\n    const manifest = (await readFile(path.join(getTemplatePath(\"appx\"), \"appxmanifest.xml\"), \"utf8\"))\r\n      .replace(/\\${([a-zA-Z0-9]+)}/g, (match, p1): string => {\r\n        switch (p1) {\r\n          case \"publisher\":\r\n            return publisher\r\n\r\n          case \"publisherDisplayName\":\r\n            const name = options.publisherDisplayName || appInfo.companyName\r\n            if (name == null) {\r\n              throw new InvalidConfigurationError(`Please specify \"author\" in the application package.json — it is required because \"appx.publisherDisplayName\" is not set.`)\r\n            }\r\n            return name\r\n\r\n          case \"version\":\r\n            return appInfo.getVersionInWeirdWindowsForm(false)\r\n\r\n          case \"applicationId\":\r\n            const result = options.applicationId || options.identityName || appInfo.name\r\n            if (!isNaN(parseInt(result[0], 10))) {\r\n              let message = `AppX Application.Id can’t start with numbers: \"${result}\"`\r\n              if (options.applicationId == null) {\r\n                message += `\\nPlease set appx.applicationId (or correct appx.identityName or name)`\r\n              }\r\n              throw new InvalidConfigurationError(message)\r\n            }\r\n            return result\r\n\r\n          case \"identityName\":\r\n            return options.identityName  || appInfo.name\r\n\r\n          case \"executable\":\r\n            return executable\r\n\r\n          case \"displayName\":\r\n            return displayName\r\n\r\n          case \"description\":\r\n            return appInfo.description || appInfo.productName\r\n\r\n          case \"backgroundColor\":\r\n            return options.backgroundColor || \"#464646\"\r\n\r\n          case \"logo\":\r\n            return \"assets\\\\StoreLogo.png\"\r\n\r\n          case \"square150x150Logo\":\r\n            return \"assets\\\\Square150x150Logo.png\"\r\n\r\n          case \"square44x44Logo\":\r\n            return \"assets\\\\Square44x44Logo.png\"\r\n\r\n          case \"lockScreen\":\r\n            return lockScreenTag(userAssets)\r\n\r\n          case \"defaultTile\":\r\n            return defaultTileTag(userAssets)\r\n\r\n          case \"splashScreen\":\r\n            return splashScreenTag(userAssets)\r\n\r\n          case \"arch\":\r\n            return arch === Arch.ia32 ? \"x86\" : \"x64\"\r\n\r\n          case \"resourceLanguages\":\r\n            return resourceLanguageTag(asArray(options.languages))\r\n\r\n          case \"extensions\":\r\n            return this.getExtensions(executable, displayName)\r\n\r\n          default:\r\n            throw new Error(`Macro ${p1} is not defined`)\r\n        }\r\n      })\r\n    await writeFile(outFile, manifest)\r\n  }\r\n\r\n  private getExtensions(executable: string, displayName: string): string {\r\n    const uriSchemes = asArray(this.packager.config.protocols)\r\n      .concat(asArray(this.packager.platformSpecificBuildOptions.protocols))\r\n\r\n    let isAddAutoLaunchExtension = this.options.addAutoLaunchExtension\r\n    if (isAddAutoLaunchExtension === undefined) {\r\n      const deps = this.packager.info.metadata.dependencies\r\n      isAddAutoLaunchExtension = deps != null && deps[\"electron-winstore-auto-launch\"] != null\r\n    }\r\n\r\n    if (!isAddAutoLaunchExtension && uriSchemes.length === 0) {\r\n      return \"\"\r\n    }\r\n\r\n    let extensions = \"<Extensions>\"\r\n\r\n    if (isAddAutoLaunchExtension) {\r\n      extensions += `\r\n        <desktop:Extension Category=\"windows.startupTask\" Executable=\"${executable}\" EntryPoint=\"Windows.FullTrustApplication\">\r\n          <desktop:StartupTask TaskId=\"SlackStartup\" Enabled=\"true\" DisplayName=\"${displayName}\" />\r\n        </desktop:Extension>`\r\n    }\r\n\r\n    for (const protocol of uriSchemes) {\r\n      for (const scheme of asArray(protocol.schemes)) {\r\n        extensions += `\r\n          <uap:Extension Category=\"windows.protocol\">\r\n            <uap:Protocol Name=\"${scheme}\">\r\n               <uap:DisplayName>${protocol.name}</uap:DisplayName>\r\n             </uap:Protocol>\r\n          </uap:Extension>`\r\n      }\r\n    }\r\n\r\n    extensions += `\r\n      <uap:Extension Category=\"windows.fileTypeAssociation\">\r\n        <uap:FileTypeAssociation Name=\"vzl\">\r\n          <uap:DisplayName>Vizzlo Document</uap:DisplayName>\r\n          <uap:Logo>assets\\\\vzl.png</uap:Logo>\r\n          <uap:SupportedFileTypes>\r\n            <uap:FileType>.vzl</uap:FileType>\r\n          </uap:SupportedFileTypes>\r\n        </uap:FileTypeAssociation>\r\n      </uap:Extension>`\r\n\r\n    extensions += \"</Extensions>\"\r\n    return extensions\r\n  }\r\n}\r\n\r\n// get the resource - language tag, see https://docs.microsoft.com/en-us/windows/uwp/globalizing/manage-language-and-region#specify-the-supported-languages-in-the-apps-manifest\r\nfunction resourceLanguageTag(userLanguages: Array<string> | null | undefined): string {\r\n  if (userLanguages == null || userLanguages.length === 0) {\r\n    userLanguages = [DEFAULT_RESOURCE_LANG]\r\n  }\r\n  return userLanguages.map(it => `<Resource Language=\"${it.replace(/_/g, \"-\")}\" />`).join(\"\\n\")\r\n}\r\n\r\nfunction lockScreenTag(userAssets: Array<string>): string {\r\n  if (isDefaultAssetIncluded(userAssets, \"BadgeLogo.png\")) {\r\n    return '<uap:LockScreen Notification=\"badgeAndTileText\" BadgeLogo=\"assets\\\\BadgeLogo.png\" />'\r\n  }\r\n  else {\r\n    return \"\"\r\n  }\r\n}\r\n\r\nfunction defaultTileTag(userAssets: Array<string>): string {\r\n  const defaultTiles: Array<string> = [\"<uap:DefaultTile\", 'Wide310x150Logo=\"assets\\\\Wide310x150Logo.png\"']\r\n\r\n  if (isDefaultAssetIncluded(userAssets, \"LargeTile.png\")) {\r\n    defaultTiles.push('Square310x310Logo=\"assets\\\\LargeTile.png\"')\r\n  }\r\n  if (isDefaultAssetIncluded(userAssets, \"SmallTile.png\")) {\r\n    defaultTiles.push('Square71x71Logo=\"assets\\\\SmallTile.png\"')\r\n  }\r\n\r\n  defaultTiles.push(\"/>\")\r\n  return defaultTiles.join(\" \")\r\n}\r\n\r\nfunction splashScreenTag(userAssets: Array<string>): string {\r\n  if (isDefaultAssetIncluded(userAssets, \"SplashScreen.png\")) {\r\n    return '<uap:SplashScreen Image=\"assets\\\\SplashScreen.png\" />'\r\n  }\r\n  else {\r\n    return \"\"\r\n  }\r\n}\r\n\r\nfunction isDefaultAssetIncluded(userAssets: Array<string>, defaultAsset: string) {\r\n  const defaultAssetName = defaultAsset.substring(0, defaultAsset.indexOf(\".\"))\r\n  return userAssets.some(it => it.includes(defaultAssetName))\r\n}\r\n\r\nfunction isScaledAssetsProvided(userAssets: Array<string>) {\r\n  return userAssets.some(it => it.includes(\".scale-\") || it.includes(\".targetsize-\"))\r\n}\r\n"],"sourceRoot":""}
