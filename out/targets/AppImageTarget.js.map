{"version":3,"sources":["../../src/targets/AppImageTarget.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, serializeToYaml } from \"builder-util\"\r\nimport { outputFile } from \"fs-extra-p\"\r\nimport { Lazy } from \"lazy-val\"\r\nimport * as path from \"path\"\r\nimport { AppImageOptions } from \"..\"\r\nimport { Target } from \"../core\"\r\nimport { LinuxPackager } from \"../linuxPackager\"\r\nimport { getAppUpdatePublishConfiguration } from \"../publish/PublishManager\"\r\nimport { executeAppBuilderAsJson, objectToArgs } from \"../util/appBuilder\"\r\nimport { getNotLocalizedLicenseFile } from \"../util/license\"\r\nimport { LinuxTargetHelper } from \"./LinuxTargetHelper\"\r\nimport { createStageDir } from \"./targetUtil\"\r\n\r\n// https://unix.stackexchange.com/questions/375191/append-to-sub-directory-inside-squashfs-file\r\nexport default class AppImageTarget extends Target {\r\n  readonly options: AppImageOptions = {...this.packager.platformSpecificBuildOptions, ...(this.packager.config as any)[this.name]}\r\n  private readonly desktopEntry: Lazy<string>\r\n\r\n  constructor(ignored: string, private readonly packager: LinuxPackager, private readonly helper: LinuxTargetHelper, readonly outDir: string) {\r\n    super(\"appImage\")\r\n\r\n    // we add X-AppImage-BuildId to ensure that new desktop file will be installed\r\n    this.desktopEntry = new Lazy<string>(() => helper.computeDesktopEntry(this.options, \"AppRun\", {\r\n      \"X-AppImage-Version\": `${packager.appInfo.buildVersion}`,\r\n    }))\r\n  }\r\n\r\n  async build(appOutDir: string, arch: Arch): Promise<any> {\r\n    const packager = this.packager\r\n    const options = this.options\r\n    // https://github.com/electron-userland/electron-builder/issues/775\r\n    // https://github.com/electron-userland/electron-builder/issues/1726\r\n    // tslint:disable-next-line:no-invalid-template-strings\r\n    const artifactName = packager.expandArtifactBeautyNamePattern(options, \"AppImage\", arch)\r\n    const artifactPath = path.join(this.outDir, artifactName)\r\n    await packager.info.callArtifactBuildStarted({\r\n      targetPresentableName: \"AppImage\",\r\n      file: artifactPath,\r\n      arch,\r\n    })\r\n\r\n    const c = await Promise.all([\r\n      this.desktopEntry.value,\r\n      this.helper.icons,\r\n      getAppUpdatePublishConfiguration(packager, arch, false /* in any case validation will be done on publish */),\r\n      getNotLocalizedLicenseFile(options.license, this.packager, [\"txt\", \"html\"]),\r\n      createStageDir(this, packager, arch),\r\n    ])\r\n    const license = c[3]\r\n    const stageDir = c[4]\r\n\r\n    const publishConfig = c[2]\r\n    if (publishConfig != null) {\r\n      await outputFile(path.join(packager.getResourcesDir(stageDir.dir), \"app-update.yml\"), serializeToYaml(publishConfig))\r\n    }\r\n\r\n    if (this.packager.packagerOptions.effectiveOptionComputed != null && await this.packager.packagerOptions.effectiveOptionComputed({desktop: await this.desktopEntry.value})) {\r\n      return\r\n    }\r\n\r\n    const args = [\r\n      \"appimage\",\r\n      \"--stage\", stageDir.dir,\r\n      \"--arch\", Arch[arch],\r\n      \"--output\", artifactPath,\r\n      \"--app\", appOutDir,\r\n      \"--configuration\", (JSON.stringify({\r\n        productName: this.packager.appInfo.productName,\r\n        desktopEntry: c[0],\r\n        executableName: this.packager.executableName,\r\n        icons: c[1],\r\n        fileAssociations: this.packager.fileAssociations,\r\n        ...options,\r\n      })),\r\n    ]\r\n    objectToArgs(args, {\r\n      license,\r\n    })\r\n    if (packager.compression === \"maximum\") {\r\n      args.push(\"--compression\", \"xz\")\r\n    }\r\n\r\n    await packager.info.callArtifactBuildCompleted({\r\n      file: artifactPath,\r\n      safeArtifactName: packager.computeSafeArtifactName(artifactName, \"AppImage\", arch, false),\r\n      target: this,\r\n      arch,\r\n      packager,\r\n      isWriteUpdateInfo: true,\r\n      updateInfo: await executeAppBuilderAsJson(args),\r\n    })\r\n  }\r\n}"],"sourceRoot":""}
