{"version":3,"sources":["../../src/targets/LinuxTargetHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { asArray, isEmptyOrSpaces, log } from \"builder-util\"\r\nimport { outputFile } from \"fs-extra-p\"\r\nimport { Lazy } from \"lazy-val\"\r\nimport { LinuxTargetSpecificOptions } from \"..\"\r\nimport { LinuxPackager } from \"../linuxPackager\"\r\nimport { IconInfo } from \"../platformPackager\"\r\n\r\nexport const installPrefix = \"/opt\"\r\n\r\nexport class LinuxTargetHelper {\r\n  private readonly iconPromise = new Lazy(() => this.computeDesktopIcons())\r\n\r\n  maxIconPath: string | null = null\r\n\r\n  constructor(private packager: LinuxPackager) {\r\n  }\r\n\r\n  get icons(): Promise<Array<IconInfo>> {\r\n    return this.iconPromise.value\r\n  }\r\n\r\n  // must be name without spaces and other special characters, but not product name used\r\n  private async computeDesktopIcons(): Promise<Array<IconInfo>> {\r\n    const packager = this.packager\r\n    const iconDir = packager.platformSpecificBuildOptions.icon\r\n    const sources = iconDir == null ? [] : [iconDir]\r\n\r\n    const commonConfiguration = packager.config\r\n    const icnsPath = (commonConfiguration.mac || {}).icon || commonConfiguration.icon\r\n    if (icnsPath != null) {\r\n      sources.push(icnsPath)\r\n    }\r\n\r\n    // need to put here and not as default because need to resolve image size\r\n    const result = await packager.resolveIcon(sources, asArray(packager.getDefaultFrameworkIcon()), \"set\")\r\n    this.maxIconPath = result[result.length - 1].file\r\n    return result\r\n  }\r\n\r\n  getDescription(options: LinuxTargetSpecificOptions) {\r\n    return options.description || this.packager.appInfo.description\r\n  }\r\n\r\n  async writeDesktopEntry(targetSpecificOptions: LinuxTargetSpecificOptions, exec?: string, destination?: string | null, extra?: { [key: string]: string; }): Promise<string> {\r\n    const data = await this.computeDesktopEntry(targetSpecificOptions, exec, extra)\r\n    const file = destination || await this.packager.getTempFile(`${this.packager.appInfo.productFilename}.desktop`)\r\n    await outputFile(file, data)\r\n    return file\r\n  }\r\n\r\n  async computeDesktopEntry(targetSpecificOptions: LinuxTargetSpecificOptions, exec?: string, extra?: { [key: string]: string; }): Promise<string> {\r\n    if (exec != null && exec.length === 0) {\r\n      throw new Error(\"Specified exec is empty\")\r\n    }\r\n    // https://github.com/electron-userland/electron-builder/issues/3418\r\n    if (targetSpecificOptions.desktop != null && targetSpecificOptions.desktop.Exec != null) {\r\n      throw new Error(\"Please specify executable name as linux.executableName instead of linux.desktop.Exec\")\r\n    }\r\n\r\n    const packager = this.packager\r\n    const appInfo = packager.appInfo\r\n\r\n    const productFilename = appInfo.productFilename\r\n\r\n    const desktopMeta: any = {\r\n      Name: appInfo.productName,\r\n      Comment: this.getDescription(targetSpecificOptions),\r\n      Exec: exec == null ? `\"${installPrefix}/${productFilename}/${packager.executableName}\" %U` : exec,\r\n      Terminal: \"false\",\r\n      Type: \"Application\",\r\n      Icon: packager.executableName,\r\n      // https://askubuntu.com/questions/367396/what-represent-the-startupwmclass-field-of-a-desktop-file\r\n      // must be set to package.json name (because it is Electron set WM_CLASS)\r\n      // to get WM_CLASS of running window: xprop WM_CLASS\r\n      // StartupWMClass doesn't work for unicode\r\n      // https://github.com/electron/electron/blob/2-0-x/atom/browser/native_window_views.cc#L226\r\n      StartupWMClass: appInfo.productName,\r\n      ...extra,\r\n      ...targetSpecificOptions.desktop,\r\n    }\r\n\r\n    const mimeTypes: Array<string> = asArray(targetSpecificOptions.mimeTypes)\r\n    for (const fileAssociation of packager.fileAssociations) {\r\n      if (fileAssociation.mimeType != null) {\r\n        mimeTypes.push(fileAssociation.mimeType)\r\n      }\r\n    }\r\n\r\n    for (const protocol of asArray(packager.config.protocols).concat(asArray(packager.platformSpecificBuildOptions.protocols))) {\r\n      for (const scheme of asArray(protocol.schemes)) {\r\n        mimeTypes.push(`x-scheme-handler/${scheme}`)\r\n      }\r\n    }\r\n\r\n    if (mimeTypes.length !== 0) {\r\n      desktopMeta.MimeType = mimeTypes.join(\";\") + \";\"\r\n    }\r\n\r\n    let category = targetSpecificOptions.category\r\n    if (isEmptyOrSpaces(category)) {\r\n      const macCategory = (packager.config.mac || {}).category\r\n      if (macCategory != null) {\r\n        category = macToLinuxCategory[macCategory]\r\n      }\r\n\r\n      if (category == null) {\r\n        // https://github.com/develar/onshape-desktop-shell/issues/48\r\n        if (macCategory != null) {\r\n          log.warn({macCategory}, \"cannot map macOS category to Linux. If possible mapping is known for you, please file issue to add it.\")\r\n        }\r\n        log.warn({\r\n          reason: \"linux.category is not set and cannot map from macOS\",\r\n          docs: \"https://www.electron.build/configuration/linux\",\r\n        }, \"application Linux category is set to default \\\"Utility\\\"\")\r\n        category = \"Utility\"\r\n      }\r\n    }\r\n    desktopMeta.Categories = `${category}${category.endsWith(\";\") ? \"\" : \";\"}`\r\n\r\n    let data = `[Desktop Entry]`\r\n    for (const name of Object.keys(desktopMeta)) {\r\n      data += `\\n${name}=${desktopMeta[name]}`\r\n    }\r\n    data += \"\\n\"\r\n    return data\r\n  }\r\n}\r\n\r\nconst macToLinuxCategory: any = {\r\n  \"public.app-category.graphics-design\": \"Graphics\",\r\n  \"public.app-category.developer-tools\": \"Development\",\r\n  \"public.app-category.education\": \"Education\",\r\n  \"public.app-category.games\": \"Game\",\r\n  \"public.app-category.video\": \"Video;AudioVideo\",\r\n  \"public.app-category.utilities\": \"Utility\",\r\n  \"public.app-category.social-networking\": \"Network;Chat\",\r\n  \"public.app-category.finance\": \"Office;Finance\",\r\n}\r\n"],"sourceRoot":""}
