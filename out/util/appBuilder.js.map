{"version":3,"sources":["../../src/util/appBuilder.ts"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEM,SAAU,uBAAV,CAAqC,IAArC,EAAwD;AAC5D,SAAO,sCAAkB,IAAlB,EACJ,IADI,CACC,SAAS,IAAG;AAChB,QAAI;AACF,aAAO,IAAI,CAAC,KAAL,CAAW,SAAX,CAAP;AACD,KAFD,CAGA,OAAO,CAAP,EAAU;AACR,YAAM,IAAI,KAAJ,CAAU,wBAAwB,CAAC,CAAC,OAAO,MAAM,SAAS,GAA1D,CAAN;AACD;AACF,GARI,CAAP;AASD;;AAEK,SAAU,YAAV,CAAuB,EAAvB,EAA0C,cAA1C,EAA2F;AAC/F,OAAK,MAAM,IAAX,IAAmB,MAAM,CAAC,IAAP,CAAY,cAAZ,CAAnB,EAAgD;AAC9C,UAAM,KAAK,GAAG,cAAc,CAAC,IAAD,CAA5B;;AACA,QAAI,KAAK,IAAI,IAAb,EAAmB;AACjB,MAAA,EAAE,CAAC,IAAH,CAAQ,KAAK,IAAI,EAAjB,EAAqB,KAArB;AACD;AACF;AACF,C","sourcesContent":["import { executeAppBuilder } from \"builder-util\"\r\n\r\nexport function executeAppBuilderAsJson<T>(args: Array<string>): Promise<T> {\r\n  return executeAppBuilder(args)\r\n    .then(rawResult => {\r\n      try {\r\n        return JSON.parse(rawResult) as T\r\n      }\r\n      catch (e) {\r\n        throw new Error(`Cannot parse result: ${e.message}: \"${rawResult}\"`)\r\n      }\r\n    })\r\n}\r\n\r\nexport function objectToArgs(to: Array<string>, argNameToValue: { [key: string]: string | null; }): void {\r\n  for (const name of Object.keys(argNameToValue)) {\r\n    const value = argNameToValue[name]\r\n    if (value != null) {\r\n      to.push(`--${name}`, value)\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}
