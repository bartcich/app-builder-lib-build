{"version":3,"sources":["../../src/util/appFileCopier.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\r\nimport { AsyncTaskManager, log } from \"builder-util\"\r\nimport { CONCURRENCY, FileCopier, Link, MAX_FILE_REQUESTS, FileTransformer, statOrNull, walk } from \"builder-util/out/fs\"\r\nimport { ensureDir, readlink, Stats, symlink } from \"fs-extra-p\"\r\nimport * as path from \"path\"\r\nimport { isLibOrExe } from \"../asar/unpackDetector\"\r\nimport { Platform } from \"../core\"\r\nimport { Packager } from \"../packager\"\r\nimport { PlatformPackager } from \"../platformPackager\"\r\nimport { excludedExts, FileMatcher } from \"../fileMatcher\"\r\nimport { createElectronCompilerHost, NODE_MODULES_PATTERN } from \"../fileTransformer\"\r\nimport { executeAppBuilderAsJson } from \"./appBuilder\"\r\nimport { AppFileWalker } from \"./AppFileWalker\"\r\nimport { NodeModuleCopyHelper } from \"./NodeModuleCopyHelper\"\r\n\r\nconst BOWER_COMPONENTS_PATTERN = `${path.sep}bower_components${path.sep}`\r\n/** @internal */\r\nexport const ELECTRON_COMPILE_SHIM_FILENAME = \"__shim.js\"\r\n\r\nexport function getDestinationPath(file: string, fileSet: ResolvedFileSet) {\r\n  if (file === fileSet.src) {\r\n    return fileSet.destination\r\n  }\r\n  else {\r\n    const src = fileSet.src\r\n    const dest = fileSet.destination\r\n    if (file.length > src.length && file.startsWith(src) && file[src.length] === path.sep) {\r\n      return dest + file.substring(src.length)\r\n    }\r\n    else {\r\n      // hoisted node_modules\r\n      // not lastIndexOf, to ensure that nested module (top-level module depends on) copied to parent node_modules, not to top-level directory\r\n      // project https://github.com/angexis/punchcontrol/commit/cf929aba55c40d0d8901c54df7945e1d001ce022\r\n      const index = file.indexOf(NODE_MODULES_PATTERN)\r\n      if (index < 0) {\r\n        throw new Error(`File \"${file}\" not under the source directory \"${fileSet.src}\"`)\r\n      }\r\n      return dest + file.substring(index + 1 /* leading slash */)\r\n    }\r\n  }\r\n}\r\n\r\nexport async function copyAppFiles(fileSet: ResolvedFileSet, packager: Packager, transformer: FileTransformer) {\r\n  const metadata = fileSet.metadata\r\n  // search auto unpacked dir\r\n  const taskManager = new AsyncTaskManager(packager.cancellationToken)\r\n  const createdParentDirs = new Set<string>()\r\n\r\n  const fileCopier = new FileCopier(file => {\r\n    // https://github.com/electron-userland/electron-builder/issues/3038\r\n    return !(isLibOrExe(file) || file.endsWith(\".node\"))\r\n  }, transformer)\r\n  const links: Array<Link> = []\r\n  for (let i = 0, n = fileSet.files.length; i < n; i++) {\r\n    const sourceFile = fileSet.files[i]\r\n    const stat = metadata.get(sourceFile)\r\n    if (stat == null) {\r\n      // dir\r\n      continue\r\n    }\r\n\r\n    const destinationFile = getDestinationPath(sourceFile, fileSet)\r\n    if (stat.isSymbolicLink()) {\r\n      links.push({file: destinationFile, link: await readlink(sourceFile)})\r\n      continue\r\n    }\r\n\r\n    const fileParent = path.dirname(destinationFile)\r\n    if (!createdParentDirs.has(fileParent)) {\r\n      createdParentDirs.add(fileParent)\r\n      await ensureDir(fileParent)\r\n    }\r\n\r\n    taskManager.addTask(fileCopier.copy(sourceFile, destinationFile, stat))\r\n    if (taskManager.tasks.length > MAX_FILE_REQUESTS) {\r\n      await taskManager.awaitTasks()\r\n    }\r\n  }\r\n\r\n  if (taskManager.tasks.length > 0) {\r\n    await taskManager.awaitTasks()\r\n  }\r\n  if (links.length > 0) {\r\n    await BluebirdPromise.map(links, it => symlink(it.link, it.file), CONCURRENCY)\r\n  }\r\n}\r\n\r\n// os path separator is used\r\nexport interface ResolvedFileSet {\r\n  src: string\r\n  destination: string\r\n\r\n  files: Array<string>\r\n  metadata: Map<string, Stats>\r\n  transformedFiles?: Map<number, string | Buffer> | null\r\n}\r\n\r\n// used only for ASAR, if no asar, file transformed on the fly\r\nexport async function transformFiles(transformer: FileTransformer, fileSet: ResolvedFileSet): Promise<void> {\r\n  if (transformer == null) {\r\n    return\r\n  }\r\n\r\n  let transformedFiles = fileSet.transformedFiles\r\n  if (fileSet.transformedFiles == null) {\r\n    transformedFiles = new Map()\r\n    fileSet.transformedFiles = transformedFiles\r\n  }\r\n\r\n  const metadata = fileSet.metadata\r\n  await BluebirdPromise.filter(fileSet.files, (it, index) => {\r\n    const fileStat = metadata.get(it)\r\n    if (fileStat == null || !fileStat.isFile()) {\r\n      return false\r\n    }\r\n\r\n    const transformedValue = transformer(it)\r\n    if (transformedValue == null) {\r\n      return false\r\n    }\r\n\r\n    if (typeof transformedValue === \"object\" && \"then\" in transformedValue) {\r\n      return (transformedValue as Promise<any>)\r\n        .then(it => {\r\n          if (it != null) {\r\n            transformedFiles!!.set(index, it)\r\n          }\r\n          return false\r\n        })\r\n    }\r\n    transformedFiles!!.set(index, transformedValue as string | Buffer)\r\n    return false\r\n  }, CONCURRENCY)\r\n}\r\n\r\nexport async function computeFileSets(matchers: Array<FileMatcher>, transformer: FileTransformer | null, platformPackager: PlatformPackager<any>, isElectronCompile: boolean): Promise<Array<ResolvedFileSet>> {\r\n  const fileSets: Array<ResolvedFileSet> = []\r\n  const packager = platformPackager.info\r\n\r\n  for (const matcher of matchers) {\r\n    const fileWalker = new AppFileWalker(matcher, packager)\r\n\r\n    const fromStat = await statOrNull(matcher.from)\r\n    if (fromStat == null) {\r\n      log.debug({directory: matcher.from, reason: \"doesn't exist\"}, `skipped copying`)\r\n      continue\r\n    }\r\n\r\n    const files = await walk(matcher.from, fileWalker.filter, fileWalker)\r\n    const metadata = fileWalker.metadata\r\n    fileSets.push(validateFileSet({src: matcher.from, files, metadata, destination: matcher.to}))\r\n  }\r\n\r\n  if (isElectronCompile) {\r\n    // cache files should be first (better IO)\r\n    fileSets.unshift(await compileUsingElectronCompile(fileSets[0], packager))\r\n  }\r\n  return fileSets\r\n}\r\n\r\nfunction getNodeModuleExcludedExts(platformPackager: PlatformPackager<any>) {\r\n  // do not exclude *.h files (https://github.com/electron-userland/electron-builder/issues/2852)\r\n  const result = [\".o\", \".obj\"].concat(excludedExts.split(\",\").map(it => `.${it}`))\r\n  if (platformPackager.config.includePdb !== true) {\r\n    result.push(\".pdb\")\r\n  }\r\n  if (platformPackager.platform !== Platform.WINDOWS) {\r\n    // https://github.com/electron-userland/electron-builder/issues/1738\r\n    result.push(\".dll\")\r\n    result.push(\".exe\")\r\n  }\r\n  return result\r\n}\r\n\r\nfunction validateFileSet(fileSet: ResolvedFileSet): ResolvedFileSet {\r\n  if (fileSet.src == null || fileSet.src.length === 0) {\r\n    throw new Error(\"fileset src is empty\")\r\n  }\r\n  return fileSet\r\n}\r\n\r\n/** @internal */\r\nexport async function computeNodeModuleFileSets(platformPackager: PlatformPackager<any>, mainMatcher: FileMatcher): Promise<Array<ResolvedFileSet>> {\r\n  const args = [\"node-dep-tree\", \"--dir\", platformPackager.info.appDir]\r\n  if (platformPackager.info.framework.getExcludedDependencies != null) {\r\n    const excludedDependencies = platformPackager.info.framework.getExcludedDependencies(platformPackager.platform)\r\n    if (excludedDependencies != null) {\r\n      for (const name of excludedDependencies) {\r\n        args.push(\"--exclude-dep\", name)\r\n      }\r\n    }\r\n  }\r\n\r\n  const deps = await executeAppBuilderAsJson<Array<any>>(args)\r\n  const nodeModuleExcludedExts = getNodeModuleExcludedExts(platformPackager)\r\n  // mapSeries instead of map because copyNodeModules is concurrent and so, no need to increase queue/pressure\r\n  return await BluebirdPromise.mapSeries(deps, async info => {\r\n    const source = info.dir\r\n    let destination: string\r\n    if (source.length > mainMatcher.from.length && source.startsWith(mainMatcher.from) && source[mainMatcher.from.length] === path.sep) {\r\n      destination = getDestinationPath(source, {src: mainMatcher.from, destination: mainMatcher.to, files: [], metadata: null as any})\r\n    }\r\n    else {\r\n      destination = mainMatcher.to + path.sep + \"node_modules\"\r\n    }\r\n\r\n    // use main matcher patterns, so, user can exclude some files in such hoisted node modules\r\n    // source here includes node_modules, but pattern base should be without because users expect that pattern \"!node_modules/loot-core/src{,/**/*}\" will work\r\n    const matcher = new FileMatcher(path.dirname(source), destination, mainMatcher.macroExpander, mainMatcher.patterns)\r\n    const copier = new NodeModuleCopyHelper(matcher, platformPackager.info)\r\n    const names = info.deps\r\n    const files = await copier.collectNodeModules(source, names, nodeModuleExcludedExts)\r\n    return validateFileSet({src: source, destination, files, metadata: copier.metadata})\r\n  })\r\n}\r\n\r\nasync function compileUsingElectronCompile(mainFileSet: ResolvedFileSet, packager: Packager): Promise<ResolvedFileSet> {\r\n  log.info(\"compiling using electron-compile\")\r\n\r\n  const electronCompileCache = await packager.tempDirManager.getTempDir({prefix: \"electron-compile-cache\"})\r\n  const cacheDir = path.join(electronCompileCache, \".cache\")\r\n  // clear and create cache dir\r\n  await ensureDir(cacheDir)\r\n  const compilerHost = await createElectronCompilerHost(mainFileSet.src, cacheDir)\r\n  const nextSlashIndex = mainFileSet.src.length + 1\r\n  // pre-compute electron-compile to cache dir - we need to process only subdirectories, not direct files of app dir\r\n  await BluebirdPromise.map(mainFileSet.files, file => {\r\n    if (file.includes(NODE_MODULES_PATTERN) || file.includes(BOWER_COMPONENTS_PATTERN)\r\n      || !file.includes(path.sep, nextSlashIndex) // ignore not root files\r\n      || !mainFileSet.metadata.get(file)!.isFile()) {\r\n      return null\r\n    }\r\n    return compilerHost.compile(file)\r\n      .then(() => null)\r\n  }, CONCURRENCY)\r\n\r\n  await compilerHost.saveConfiguration()\r\n\r\n  const metadata = new Map<string, Stats>()\r\n  const cacheFiles = await walk(cacheDir, file => !file.startsWith(\".\"), {\r\n    consume: (file, fileStat) => {\r\n      if (fileStat.isFile()) {\r\n        metadata.set(file, fileStat)\r\n      }\r\n      return null\r\n    }\r\n  })\r\n\r\n  // add shim\r\n  const shimPath = `${mainFileSet.src}${path.sep}${ELECTRON_COMPILE_SHIM_FILENAME}`\r\n  mainFileSet.files.push(shimPath)\r\n  mainFileSet.metadata.set(shimPath, {isFile: () => true, isDirectory: () => false, isSymbolicLink: () => false} as any)\r\n  if (mainFileSet.transformedFiles == null) {\r\n    mainFileSet.transformedFiles = new Map()\r\n  }\r\n  mainFileSet.transformedFiles.set(mainFileSet.files.length - 1, `\r\n'use strict';\r\nrequire('electron-compile').init(__dirname, require('path').resolve(__dirname, '${packager.metadata.main || \"index\"}'), true);\r\n`)\r\n  return {src: electronCompileCache, files: cacheFiles, metadata, destination: mainFileSet.destination}\r\n}"],"sourceRoot":""}
