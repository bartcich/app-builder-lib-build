{"version":3,"sources":["../src/fileTransformer.ts"],"names":[],"mappings":"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","sourcesContent":["import { debug, log, deepAssign } from \"builder-util\"\r\nimport { FileTransformer } from \"builder-util/out/fs\"\r\nimport { readFile } from \"fs-extra-p\"\r\nimport * as path from \"path\"\r\nimport { Configuration } from \"./configuration\"\r\nimport { Packager } from \"./packager\"\r\n\r\n/** @internal */\r\nexport const NODE_MODULES_PATTERN = `${path.sep}node_modules${path.sep}`\r\n\r\n/** @internal */\r\nexport function isElectronCompileUsed(info: Packager): boolean {\r\n  if (info.config.electronCompile != null) {\r\n    return info.config.electronCompile\r\n  }\r\n\r\n  // if in devDependencies - it means that babel is used for precompilation or for some reason user decided to not use electron-compile for production\r\n  return hasDep(\"electron-compile\", info)\r\n}\r\n\r\n/** @internal */\r\nexport function hasDep(name: string, info: Packager) {\r\n  const deps = info.metadata.dependencies\r\n  return deps != null && name in deps\r\n}\r\n\r\n/** @internal */\r\nexport function createTransformer(srcDir: string, configuration: Configuration, extraMetadata: any, extraTransformer: FileTransformer | null): FileTransformer {\r\n  const mainPackageJson = path.join(srcDir, \"package.json\")\r\n  const isRemovePackageScripts = configuration.removePackageScripts !== false\r\n  const packageJson = path.sep + \"package.json\"\r\n  return file => {\r\n    if (file === mainPackageJson) {\r\n      return modifyMainPackageJson(file, extraMetadata, isRemovePackageScripts)\r\n    }\r\n\r\n    if (file.endsWith(packageJson) && file.includes(NODE_MODULES_PATTERN)) {\r\n      return readFile(file, \"utf-8\")\r\n        .then(it => cleanupPackageJson(JSON.parse(it), {\r\n          isMain: false,\r\n          isRemovePackageScripts,\r\n        }))\r\n        .catch(e => log.warn(e))\r\n    }\r\n    else if (extraTransformer != null) {\r\n      return extraTransformer(file)\r\n    }\r\n    else {\r\n      return null\r\n    }\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport interface CompilerHost {\r\n  compile(file: string): any\r\n\r\n  saveConfiguration(): Promise<any>\r\n}\r\n\r\n/** @internal */\r\nexport function createElectronCompilerHost(projectDir: string, cacheDir: string): Promise<CompilerHost> {\r\n  const electronCompilePath = path.join(projectDir, \"node_modules\", \"electron-compile\", \"lib\")\r\n  return require(path.join(electronCompilePath, \"config-parser\")).createCompilerHostFromProjectRoot(projectDir, cacheDir)\r\n}\r\n\r\nconst ignoredPackageMetadataProperties = new Set([\"dist\", \"gitHead\", \"keywords\", \"build\", \"jspm\", \"ava\", \"xo\", \"nyc\", \"eslintConfig\", \"contributors\", \"bundleDependencies\", \"tags\"])\r\n\r\ninterface CleanupPackageFileOptions {\r\n  readonly isRemovePackageScripts: boolean\r\n  readonly isMain: boolean\r\n}\r\n\r\nfunction cleanupPackageJson(data: any, options: CleanupPackageFileOptions): any {\r\n  const deps = data.dependencies\r\n  // https://github.com/electron-userland/electron-builder/issues/507#issuecomment-312772099\r\n  const isRemoveBabel = deps != null && typeof deps === \"object\" && !Object.getOwnPropertyNames(deps).some(it => it.startsWith(\"babel\"))\r\n  try {\r\n    let changed = false\r\n    for (const prop of Object.getOwnPropertyNames(data)) {\r\n      // removing devDependencies from package.json breaks levelup in electron, so, remove it only from main package.json\r\n      if (prop[0] === \"_\" ||\r\n        ignoredPackageMetadataProperties.has(prop) ||\r\n        (options.isRemovePackageScripts && prop === \"scripts\") ||\r\n        (options.isMain && prop === \"devDependencies\") ||\r\n        (!options.isMain && prop === \"bugs\") ||\r\n        (isRemoveBabel && prop === \"babel\")) {\r\n        delete data[prop]\r\n        changed = true\r\n      }\r\n    }\r\n\r\n    if (changed) {\r\n      return JSON.stringify(data, null, 2)\r\n    }\r\n  }\r\n  catch (e) {\r\n    debug(e)\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nasync function modifyMainPackageJson(file: string, extraMetadata: any, isRemovePackageScripts: boolean) {\r\n  const mainPackageData = JSON.parse(await readFile(file, \"utf-8\"))\r\n  if (extraMetadata != null) {\r\n    deepAssign(mainPackageData, extraMetadata)\r\n  }\r\n\r\n  // https://github.com/electron-userland/electron-builder/issues/1212\r\n  const serializedDataIfChanged = cleanupPackageJson(mainPackageData, {\r\n    isMain: true,\r\n    isRemovePackageScripts,\r\n  })\r\n  if (serializedDataIfChanged != null) {\r\n    return serializedDataIfChanged\r\n  }\r\n  else if (extraMetadata != null) {\r\n    return JSON.stringify(mainPackageData, null, 2)\r\n  }\r\n  return null\r\n}"],"sourceRoot":""}
