{"version":3,"sources":["../src/linuxPackager.ts"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEM,MAAO,aAAP,SAA6B,oCAA7B,CAAiE;AAGrE,EAAA,WAAA,CAAY,IAAZ,EAA0B;AACxB,UAAM,IAAN,EAAY,iBAAS,KAArB;AAEA,UAAM,cAAc,GAAG,KAAK,4BAAL,CAAkC,cAAzD;AACA,SAAK,cAAL,GAAsB,cAAc,IAAI,IAAlB,GAAyB,KAAK,OAAL,CAAa,aAAb,CAA2B,WAA3B,EAAzB,GAAoE,iCAAiB,cAAjB,CAA1F;AACD;;AAED,MAAI,aAAJ,GAAiB;AACf,WAAO,CAAC,MAAD,EAAS,UAAT,CAAP;AACD;;AAED,EAAA,aAAa,CAAC,OAAD,EAAyB,MAAzB,EAA4F;AACvG,QAAI,MAAJ;;AACA,UAAM,SAAS,GAAG,MAAK;AACrB,UAAI,MAAM,IAAI,IAAd,EAAoB;AAClB,QAAA,MAAM,GAAG,KAAI,sCAAJ,EAAsB,IAAtB,CAAT;AACD;;AACD,aAAO,MAAP;AACD,KALD;;AAOA,QAAI,aAAa,GAAyB,IAA1C;;AAEA,SAAK,MAAM,IAAX,IAAmB,OAAnB,EAA4B;AAC1B,UAAI,IAAI,KAAK,kBAAb,EAAyB;AACvB;AACD;;AAED,YAAM,WAAW,GAAwE,CAAC,MAAK;AAC7F,gBAAQ,IAAR;AACE,eAAK,UAAL;AACE,mBAAO,OAAO,CAAC,0BAAD,CAAP,CAAoC,OAA3C;;AACF,eAAK,MAAL;AACE,mBAAO,OAAO,CAAC,gBAAD,CAAP,CAA0B,OAAjC;;AACF,eAAK,KAAL;AACA,eAAK,KAAL;AACA,eAAK,IAAL;AACA,eAAK,SAAL;AACA,eAAK,QAAL;AACA,eAAK,KAAL;AACA,eAAK,KAAL;AACE,mBAAO,OAAO,CAAC,eAAD,CAAP,CAAyB,OAAhC;;AACF;AACE,mBAAO,IAAP;AAdJ;AAgBD,OAjBwF,GAAzF;;AAmBA,MAAA,MAAM,CAAC,IAAD,EAAO,MAAM,IAAG;AACpB,YAAI,WAAW,KAAK,IAApB,EAA0B;AACxB,iBAAO,yCAAmB,IAAnB,EAAyB,MAAzB,EAAiC,IAAjC,CAAP;AACD;;AAED,cAAM,MAAM,GAAG,IAAI,WAAJ,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,SAAS,EAArC,EAAyC,MAAzC,CAAf;;AACA,YAAI,OAAO,CAAC,QAAR,KAAqB,OAArB,IAAgC,OAAO,CAAC,GAAR,CAAY,aAAhD,EAA+D;AAC7D,cAAI,aAAa,IAAI,IAArB,EAA2B;AACzB,YAAA,aAAa,GAAG,KAAI,8BAAJ,EAAkB,IAAlB,CAAhB;AACD,WAH4D,CAI7D;;;AACA,iBAAO,IAAI,YAAJ,CAAiB,MAAjB,EAAyB,aAAzB,CAAP;AACD;;AACD,eAAO,MAAP;AACD,OAdK,CAAN;AAeD;AACF;;AAjEoE;;;;AAoEvE,MAAM,YAAN,SAA2B,cAA3B,CAAiC;AAW/B,EAAA,WAAA,CAA6B,MAA7B,EAA8D,aAA9D,EAA0F;AACxF,UAAM,MAAM,CAAC,IAAb,EAAmB;AAAK;AAAxB;AAD2B,SAAA,MAAA,GAAA,MAAA;AAAiC,SAAA,aAAA,GAAA,aAAA;AAVtD,SAAA,gBAAA,GAAmB,KAAI,+BAAJ,EAAqB,KAAK,aAAL,CAAmB,QAAnB,CAA4B,IAA5B,CAAiC,iBAAtD,CAAnB;AAYP;;AAVD,MAAI,OAAJ,GAAW;AACT,WAAO,KAAK,MAAL,CAAY,OAAnB;AACD;;AAED,MAAI,MAAJ,GAAU;AACR,WAAO,KAAK,MAAL,CAAY,MAAnB;AACD;;AAMD,QAAM,WAAN,GAAiB;AACf,UAAM,KAAK,gBAAL,CAAsB,UAAtB,EAAN;AACA,UAAM,KAAK,aAAL,CAAmB,KAAnB,EAAN;AACD;;AAED,EAAA,KAAK,CAAC,SAAD,EAAoB,IAApB,EAA8B;AACjC,UAAM,OAAO,GAAG,KAAK,OAAL,CAAa,SAAb,EAAwB,IAAxB,CAAhB;AACA,SAAK,gBAAL,CAAsB,OAAtB,CAA8B,OAA9B;AACA,WAAO,OAAP;AACD;;AAEO,QAAM,OAAN,CAAc,SAAd,EAAiC,IAAjC,EAA2C;AACjD,uBAAI,IAAJ,CAAS;AAAC,MAAA,MAAM,EAAE,KAAK,MAAL,CAAY,IAArB;AAA2B,MAAA,IAAI,EAAE,oBAAK,IAAL;AAAjC,KAAT,EAAuD,yBAAvD;;AACA,UAAM,KAAK,MAAL,CAAY,YAAZ,EAAN;AACA,SAAK,aAAL,CAAmB,aAAnB,CAAiC,KAAK,MAAtC,EAA8C,IAA9C,EAAoD,SAApD;AACD;;AA9B8B;;AAiC3B,SAAU,oBAAV,CAA+B,IAA/B,EAAyC;AAC7C,UAAQ,IAAR;AACE,SAAK,oBAAK,GAAV;AACE,aAAO,QAAP;;AACF,SAAK,oBAAK,IAAV;AACE,aAAO,MAAP;;AACF,SAAK,oBAAK,MAAV;AACE,aAAO,KAAP;;AACF,SAAK,oBAAK,KAAV;AACE,aAAO,aAAP;;AAEF;AACE,YAAM,IAAI,KAAJ,CAAU,oBAAoB,IAAI,EAAlC,CAAN;AAXJ;AAaD,C","sourcesContent":["import { Arch, AsyncTaskManager, log } from \"builder-util\"\r\nimport sanitizeFileName from \"sanitize-filename\"\r\nimport { DIR_TARGET, Platform, Target, TargetSpecificOptions } from \"./core\"\r\nimport { LinuxConfiguration } from \"./options/linuxOptions\"\r\nimport { Packager } from \"./packager\"\r\nimport { PlatformPackager } from \"./platformPackager\"\r\nimport { RemoteBuilder } from \"./remoteBuilder/RemoteBuilder\"\r\nimport AppImageTarget from \"./targets/AppImageTarget\"\r\nimport FpmTarget from \"./targets/fpm\"\r\nimport { LinuxTargetHelper } from \"./targets/LinuxTargetHelper\"\r\nimport SnapTarget from \"./targets/snap\"\r\nimport { createCommonTarget } from \"./targets/targetFactory\"\r\n\r\nexport class LinuxPackager extends PlatformPackager<LinuxConfiguration> {\r\n  readonly executableName: string\r\n\r\n  constructor(info: Packager) {\r\n    super(info, Platform.LINUX)\r\n\r\n    const executableName = this.platformSpecificBuildOptions.executableName\r\n    this.executableName = executableName == null ? this.appInfo.sanitizedName.toLowerCase() : sanitizeFileName(executableName)\r\n  }\r\n\r\n  get defaultTarget(): Array<string> {\r\n    return [\"snap\", \"appimage\"]\r\n  }\r\n\r\n  createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void): void {\r\n    let helper: LinuxTargetHelper | null\r\n    const getHelper = () => {\r\n      if (helper == null) {\r\n        helper = new LinuxTargetHelper(this)\r\n      }\r\n      return helper\r\n    }\r\n\r\n    let remoteBuilder: RemoteBuilder | null = null\r\n\r\n    for (const name of targets) {\r\n      if (name === DIR_TARGET) {\r\n        continue\r\n      }\r\n\r\n      const targetClass: typeof AppImageTarget | typeof SnapTarget | typeof FpmTarget | null = (() => {\r\n        switch (name) {\r\n          case \"appimage\":\r\n            return require(\"./targets/AppImageTarget\").default\r\n          case \"snap\":\r\n            return require(\"./targets/snap\").default\r\n          case \"deb\":\r\n          case \"rpm\":\r\n          case \"sh\":\r\n          case \"freebsd\":\r\n          case \"pacman\":\r\n          case \"apk\":\r\n          case \"p5p\":\r\n            return require(\"./targets/fpm\").default\r\n          default:\r\n            return null\r\n        }\r\n      })()\r\n\r\n      mapper(name, outDir => {\r\n        if (targetClass === null) {\r\n          return createCommonTarget(name, outDir, this)\r\n        }\r\n\r\n        const target = new targetClass(name, this, getHelper(), outDir)\r\n        if (process.platform === \"win32\" || process.env._REMOTE_BUILD) {\r\n          if (remoteBuilder == null) {\r\n            remoteBuilder = new RemoteBuilder(this)\r\n          }\r\n          // return remoteBuilder.buildTarget(this, arch, appOutDir, this.packager)\r\n          return new RemoteTarget(target, remoteBuilder)\r\n        }\r\n        return target\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nclass RemoteTarget extends Target {\r\n  private buildTaskManager = new AsyncTaskManager(this.remoteBuilder.packager.info.cancellationToken)\r\n\r\n  get options(): TargetSpecificOptions | null | undefined {\r\n    return this.target.options\r\n  }\r\n\r\n  get outDir(): string {\r\n    return this.target.outDir\r\n  }\r\n\r\n  constructor(private readonly target: Target, private readonly remoteBuilder: RemoteBuilder) {\r\n    super(target.name, true /* all must be scheduled in time (so, on finishBuild RemoteBuilder will have all targets added - so, we must set isAsyncSupported to true (resolved promise is returned)) */)\r\n  }\r\n\r\n  async finishBuild() {\r\n    await this.buildTaskManager.awaitTasks()\r\n    await this.remoteBuilder.build()\r\n  }\r\n\r\n  build(appOutDir: string, arch: Arch) {\r\n    const promise = this.doBuild(appOutDir, arch)\r\n    this.buildTaskManager.addTask(promise)\r\n    return promise\r\n  }\r\n\r\n  private async doBuild(appOutDir: string, arch: Arch) {\r\n    log.info({target: this.target.name, arch: Arch[arch]}, \"scheduling remote build\")\r\n    await this.target.checkOptions()\r\n    this.remoteBuilder.scheduleBuild(this.target, arch, appOutDir)\r\n  }\r\n}\r\n\r\nexport function toAppImageOrSnapArch(arch: Arch): string {\r\n  switch (arch) {\r\n    case Arch.x64:\r\n      return \"x86_64\"\r\n    case Arch.ia32:\r\n      return \"i386\"\r\n    case Arch.armv7l:\r\n      return \"arm\"\r\n    case Arch.arm64:\r\n      return \"arm_aarch64\"\r\n\r\n    default:\r\n      throw new Error(`Unsupported arch ${arch}`)\r\n  }\r\n}"],"sourceRoot":""}
