{"version":3,"sources":["../../src/frameworks/LibUiFramework.ts"],"names":[],"mappings":"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","sourcesContent":["import { chmod, emptyDir, ensureDir, rename, writeFile } from \"fs-extra-p\"\r\nimport * as path from \"path\"\r\nimport { build as buildPlist } from \"plist\"\r\nimport { executeAppBuilder } from \"builder-util\"\r\nimport { AfterPackContext } from \"../configuration\"\r\nimport { Platform } from \"../core\"\r\nimport { Framework, PrepareApplicationStageDirectoryOptions } from \"../Framework\"\r\nimport { LinuxPackager } from \"../linuxPackager\"\r\nimport MacPackager from \"../macPackager\"\r\n\r\nexport class LibUiFramework implements Framework {\r\n  readonly name: string = \"libui\"\r\n  // noinspection JSUnusedGlobalSymbols\r\n  readonly macOsDefaultTargets = [\"dmg\"]\r\n\r\n  readonly defaultAppIdPrefix: string = \"com.libui.\"\r\n\r\n  // noinspection JSUnusedGlobalSymbols\r\n  readonly isCopyElevateHelper = false\r\n\r\n  // noinspection JSUnusedGlobalSymbols\r\n  readonly isNpmRebuildRequired = false\r\n\r\n  constructor(readonly version: string, readonly distMacOsAppName: string, protected readonly isUseLaunchUi: boolean) {\r\n  }\r\n\r\n  async prepareApplicationStageDirectory(options: PrepareApplicationStageDirectoryOptions) {\r\n    await emptyDir(options.appOutDir)\r\n\r\n    const packager = options.packager\r\n    const platform = packager.platform\r\n\r\n    if (this.isUseLaunchUiForPlatform(platform)) {\r\n      const appOutDir = options.appOutDir\r\n      await executeAppBuilder([\"proton-native\",\r\n        \"--node-version\", this.version,\r\n        \"--use-launch-ui\",\r\n        \"--platform\", platform.nodeName,\r\n        \"--arch\", options.arch,\r\n        \"--stage\", appOutDir,\r\n        \"--executable\", `${packager.appInfo.productFilename}${platform === Platform.WINDOWS ? \".exe\" : \"\"}`,\r\n      ])\r\n      return\r\n    }\r\n\r\n    if (platform === Platform.MAC) {\r\n      await this.prepareMacosApplicationStageDirectory(packager as MacPackager, options)\r\n    }\r\n    else if (platform === Platform.LINUX) {\r\n      await this.prepareLinuxApplicationStageDirectory(options)\r\n    }\r\n  }\r\n\r\n  private async prepareMacosApplicationStageDirectory(packager: MacPackager, options: PrepareApplicationStageDirectoryOptions) {\r\n    const appContentsDir = path.join(options.appOutDir, this.distMacOsAppName, \"Contents\")\r\n    await ensureDir(path.join(appContentsDir, \"Resources\"))\r\n    await ensureDir(path.join(appContentsDir, \"MacOS\"))\r\n    await executeAppBuilder([\"proton-native\", \"--node-version\", this.version, \"--platform\", \"darwin\", \"--stage\", path.join(appContentsDir, \"MacOS\")])\r\n\r\n    const appPlist: any = {\r\n      // https://github.com/albe-rosado/create-proton-app/issues/13\r\n      NSHighResolutionCapable: true,\r\n    }\r\n    await packager.applyCommonInfo(appPlist, appContentsDir)\r\n    await Promise.all([\r\n      writeFile(path.join(appContentsDir, \"Info.plist\"), buildPlist(appPlist)),\r\n      writeExecutableMain(path.join(appContentsDir, \"MacOS\", appPlist.CFBundleExecutable), `#!/bin/sh\r\n  DIR=$(dirname \"$0\")\r\n  \"$DIR/node\" \"$DIR/../Resources/app/${options.packager.info.metadata.main || \"index.js\"}\"\r\n  `),\r\n    ])\r\n  }\r\n\r\n  private async prepareLinuxApplicationStageDirectory(options: PrepareApplicationStageDirectoryOptions) {\r\n    const appOutDir = options.appOutDir\r\n    await executeAppBuilder([\"proton-native\", \"--node-version\", this.version, \"--platform\", \"linux\", \"--arch\", options.arch, \"--stage\", appOutDir])\r\n    const mainPath = path.join(appOutDir, (options.packager as LinuxPackager).executableName)\r\n    await writeExecutableMain(mainPath, `#!/bin/sh\r\n  DIR=$(dirname \"$0\")\r\n  \"$DIR/node\" \"$DIR/app/${options.packager.info.metadata.main || \"index.js\"}\"\r\n  `)\r\n  }\r\n\r\n  async afterPack(context: AfterPackContext) {\r\n    const packager = context.packager\r\n    if (!this.isUseLaunchUiForPlatform(packager.platform)) {\r\n      return\r\n    }\r\n\r\n    // LaunchUI requires main.js, rename if need\r\n    const userMain = packager.info.metadata.main || \"index.js\"\r\n    if (userMain === \"main.js\") {\r\n      return\r\n    }\r\n\r\n    await rename(path.join(context.appOutDir, \"app\", userMain), path.join(context.appOutDir, \"app\", \"main.js\"))\r\n  }\r\n\r\n  getMainFile(platform: Platform): string | null {\r\n    return this.isUseLaunchUiForPlatform(platform) ? \"main.js\" : null\r\n  }\r\n\r\n  private isUseLaunchUiForPlatform(platform: Platform) {\r\n    return platform === Platform.WINDOWS || (this.isUseLaunchUi && platform === Platform.LINUX)\r\n  }\r\n\r\n  getExcludedDependencies(platform: Platform): Array<string> | null {\r\n    // part of launchui\r\n    return this.isUseLaunchUiForPlatform(platform) ? [\"libui-node\"] : null\r\n  }\r\n}\r\n\r\nasync function writeExecutableMain(file: string, content: string) {\r\n  await writeFile(file, content, {mode: 0o755})\r\n  await chmod(file, 0o755)\r\n}"],"sourceRoot":""}
