{"version":3,"sources":["../../src/asar/asarFileChecker.ts"],"names":[],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AACO,eAAe,kBAAf,CAAkC,QAAlC,EAAoD,YAApD,EAA0E,aAA1E,EAA+F;AACpG,WAAS,KAAT,CAAe,IAAf,EAA2B;AACzB,WAAO,IAAI,KAAJ,CAAU,GAAG,aAAa,KAAK,YAAY,aAAa,QAAQ,KAAK,IAAI,EAAzE,CAAP;AACD;;AAED,MAAI,EAAJ;;AACA,MAAI;AACF,IAAA,EAAE,GAAG,MAAM,sBAAS,QAAT,CAAX;AACD,GAFD,CAGA,OAAO,CAAP,EAAU;AACR,UAAM,KAAK,CAAC,iBAAiB,CAAC,EAAnB,CAAX;AACD;;AAED,MAAI,IAAJ;;AACA,MAAI;AACF,IAAA,IAAI,GAAG,EAAE,CAAC,OAAH,CAAW,YAAX,CAAP;AACD,GAFD,CAGA,OAAO,CAAP,EAAU;AACR,UAAM,QAAQ,GAAG,MAAM,sBAAW,QAAX,CAAvB;;AACA,QAAI,QAAQ,IAAI,IAAhB,EAAsB;AACpB,YAAM,KAAK,CAAC,mDAAD,CAAX;AACD,KAJO,CAMR;;;AACA,IAAA,IAAI,GAAG,IAAP;AACD;;AAED,MAAI,IAAI,IAAI,IAAZ,EAAkB;AAChB,UAAM,KAAK,CAAC,mDAAD,CAAX;AACD;;AACD,MAAI,IAAI,CAAC,IAAL,KAAc,CAAlB,EAAqB;AACnB,UAAM,KAAK,CAAC,sBAAD,CAAX;AACD;AACF,C","sourcesContent":["import { statOrNull } from \"builder-util/out/fs\"\r\nimport { Node, readAsar } from \"./asar\"\r\n\r\n/** @internal */\r\nexport async function checkFileInArchive(asarFile: string, relativeFile: string, messagePrefix: string) {\r\n  function error(text: string) {\r\n    return new Error(`${messagePrefix} \"${relativeFile}\" in the \"${asarFile}\" ${text}`)\r\n  }\r\n\r\n  let fs\r\n  try {\r\n    fs = await readAsar(asarFile)\r\n  }\r\n  catch (e) {\r\n    throw error(`is corrupted: ${e}`)\r\n  }\r\n\r\n  let stat: Node | null\r\n  try {\r\n    stat = fs.getFile(relativeFile)\r\n  }\r\n  catch (e) {\r\n    const fileStat = await statOrNull(asarFile)\r\n    if (fileStat == null) {\r\n      throw error(`does not exist. Seems like a wrong configuration.`)\r\n    }\r\n\r\n    // asar throws error on access to undefined object (info.link)\r\n    stat = null\r\n  }\r\n\r\n  if (stat == null) {\r\n    throw error(`does not exist. Seems like a wrong configuration.`)\r\n  }\r\n  if (stat.size === 0) {\r\n    throw error(`is corrupted: size 0`)\r\n  }\r\n}\r\n"],"sourceRoot":""}
