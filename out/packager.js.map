{"version":3,"sources":["../src/packager.ts"],"names":[],"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\r\nimport { addValue, Arch, archFromString, AsyncTaskManager, DebugLogger, deepAssign, exec, InvalidConfigurationError, log, safeStringifyJson, serializeToYaml, TmpDir } from \"builder-util\"\r\nimport { CancellationToken } from \"builder-util-runtime\"\r\nimport { exists } from \"builder-util/out/fs\"\r\nimport { executeFinally, orNullIfFileNotExist } from \"builder-util/out/promise\"\r\nimport { EventEmitter } from \"events\"\r\nimport { ensureDir, outputFile } from \"fs-extra-p\"\r\nimport isCI from \"is-ci\"\r\nimport { Lazy } from \"lazy-val\"\r\nimport * as path from \"path\"\r\nimport { AppInfo } from \"./appInfo\"\r\nimport { readAsarJson } from \"./asar/asar\"\r\nimport { createElectronFrameworkSupport } from \"./electron/ElectronFramework\"\r\nimport { LibUiFramework } from \"./frameworks/LibUiFramework\"\r\nimport { AfterPackContext, Configuration, Framework, Platform, SourceRepositoryInfo, Target } from \"./index\"\r\nimport MacPackager from \"./macPackager\"\r\nimport { Metadata } from \"./options/metadata\"\r\nimport { ArtifactBuildStarted, ArtifactCreated, PackagerOptions } from \"./packagerApi\"\r\nimport { PlatformPackager, resolveFunction } from \"./platformPackager\"\r\nimport { ProtonFramework } from \"./ProtonFramework\"\r\nimport { computeArchToTargetNamesMap, createTargets, NoOpTarget } from \"./targets/targetFactory\"\r\nimport { computeDefaultAppDirectory, getConfig, validateConfig } from \"./util/config\"\r\nimport { expandMacro } from \"./util/macroExpander\"\r\nimport { Dependency, getProductionDependencies } from \"./util/packageDependencies\"\r\nimport { checkMetadata, readPackageJson } from \"./util/packageMetadata\"\r\nimport { getRepositoryInfo } from \"./util/repositoryInfo\"\r\nimport { getGypEnv, installOrRebuild } from \"./util/yarn\"\r\nimport { WinPackager } from \"./winPackager\"\r\n\r\nfunction addHandler(emitter: EventEmitter, event: string, handler: (...args: Array<any>) => void) {\r\n  emitter.on(event, handler)\r\n}\r\n\r\ndeclare const PACKAGE_VERSION: string\r\n\r\nasync function createFrameworkInfo(configuration: Configuration, packager: Packager): Promise<Framework> {\r\n  let framework = configuration.framework\r\n  if (framework != null) {\r\n    framework = framework.toLowerCase()\r\n  }\r\n\r\n  let nodeVersion = configuration.nodeVersion\r\n  // noinspection JSDeprecatedSymbols\r\n  if (framework == null && configuration.protonNodeVersion != null) {\r\n    framework = \"proton\"\r\n    // noinspection JSDeprecatedSymbols\r\n    nodeVersion = configuration.protonNodeVersion\r\n  }\r\n\r\n  if (framework === \"electron\" || framework == null) {\r\n    return await createElectronFrameworkSupport(configuration, packager)\r\n  }\r\n\r\n  if (nodeVersion == null || nodeVersion === \"current\") {\r\n    nodeVersion = process.versions.node\r\n  }\r\n\r\n  const distMacOsName = `${packager.appInfo.productFilename}.app`\r\n  const isUseLaunchUi = configuration.launchUiVersion !== false\r\n  if (framework === \"proton\") {\r\n    return new ProtonFramework(nodeVersion, distMacOsName, isUseLaunchUi)\r\n  }\r\n  else if (framework === \"libui\") {\r\n    return new LibUiFramework(nodeVersion, distMacOsName, isUseLaunchUi)\r\n  }\r\n  else {\r\n    throw new InvalidConfigurationError(`Unknown framework: ${framework}`)\r\n  }\r\n}\r\n\r\nexport class Packager {\r\n  readonly projectDir: string\r\n\r\n  private _appDir: string\r\n  get appDir(): string {\r\n    return this._appDir\r\n  }\r\n\r\n  private _metadata: Metadata | null = null\r\n  get metadata(): Metadata {\r\n    return this._metadata!!\r\n  }\r\n\r\n  private _nodeModulesHandledExternally: boolean = false\r\n\r\n  get areNodeModulesHandledExternally(): boolean {\r\n    return this._nodeModulesHandledExternally\r\n  }\r\n\r\n  private _isPrepackedAppAsar: boolean = false\r\n\r\n  get isPrepackedAppAsar(): boolean {\r\n    return this._isPrepackedAppAsar\r\n  }\r\n\r\n  private _devMetadata: Metadata | null = null\r\n  get devMetadata(): Metadata | null {\r\n    return this._devMetadata\r\n  }\r\n\r\n  private _configuration: Configuration | null = null\r\n\r\n  get config(): Configuration {\r\n    return this._configuration!!\r\n  }\r\n\r\n  isTwoPackageJsonProjectLayoutUsed = false\r\n\r\n  readonly eventEmitter = new EventEmitter()\r\n\r\n  _appInfo: AppInfo | null = null\r\n  get appInfo(): AppInfo {\r\n    return this._appInfo!!\r\n  }\r\n\r\n  readonly tempDirManager = new TmpDir(\"packager\")\r\n\r\n  private _repositoryInfo = new Lazy<SourceRepositoryInfo | null>(() => getRepositoryInfo(this.projectDir, this.metadata, this.devMetadata))\r\n\r\n  private readonly afterPackHandlers: Array<(context: AfterPackContext) => Promise<any> | null> = []\r\n\r\n  readonly options: PackagerOptions\r\n\r\n  readonly debugLogger = new DebugLogger(log.isDebugEnabled)\r\n\r\n  get repositoryInfo(): Promise<SourceRepositoryInfo | null> {\r\n    return this._repositoryInfo.value\r\n  }\r\n\r\n  private _productionDeps: Lazy<Array<Dependency>> | null = null\r\n\r\n  private get productionDeps(): Lazy<Array<Dependency>> {\r\n    let result = this._productionDeps\r\n    if (result == null) {\r\n      // https://github.com/electron-userland/electron-builder/issues/2551\r\n      result = new Lazy(async () => {\r\n        if (this.config.beforeBuild == null || (await exists(path.join(this.appDir, \"node_modules\")))) {\r\n          return await getProductionDependencies(this.appDir)\r\n        }\r\n        else {\r\n          return []\r\n        }\r\n      })\r\n      this._productionDeps = result\r\n    }\r\n    return result\r\n  }\r\n\r\n  stageDirPathCustomizer: (target: Target, packager: PlatformPackager<any>, arch: Arch) => string = (target, packager, arch) => {\r\n    return path.join(target.outDir, `__${target.name}-${Arch[arch]}`)\r\n  }\r\n\r\n  private _buildResourcesDir: string | null = null\r\n\r\n  get buildResourcesDir(): string {\r\n    let result = this._buildResourcesDir\r\n    if (result == null) {\r\n      result = path.resolve(this.projectDir, this.relativeBuildResourcesDirname)\r\n      this._buildResourcesDir = result\r\n    }\r\n    return result\r\n  }\r\n\r\n  get relativeBuildResourcesDirname(): string {\r\n    return this.config.directories!!.buildResources!!\r\n  }\r\n\r\n  private _framework: Framework | null = null\r\n  get framework(): Framework {\r\n    return this._framework!!\r\n  }\r\n\r\n  //noinspection JSUnusedGlobalSymbols\r\n  constructor(options: PackagerOptions, readonly cancellationToken = new CancellationToken()) {\r\n    if (\"devMetadata\" in options) {\r\n      throw new InvalidConfigurationError(\"devMetadata in the options is deprecated, please use config instead\")\r\n    }\r\n    if (\"extraMetadata\" in options) {\r\n      throw new InvalidConfigurationError(\"extraMetadata in the options is deprecated, please use config.extraMetadata instead\")\r\n    }\r\n\r\n    const targets = options.targets || new Map<Platform, Map<Arch, Array<string>>>()\r\n    if (options.targets == null) {\r\n      options.targets = targets\r\n    }\r\n\r\n    function processTargets(platform: Platform, types: Array<string>) {\r\n      function commonArch(currentIfNotSpecified: boolean): Array<Arch> {\r\n        if (platform === Platform.MAC) {\r\n          return currentIfNotSpecified ? [Arch.x64] : []\r\n        }\r\n\r\n        const result = Array<Arch>()\r\n        return result.length === 0 && currentIfNotSpecified ? [archFromString(process.arch)] : result\r\n      }\r\n\r\n      let archToType = targets.get(platform)\r\n      if (archToType == null) {\r\n        archToType = new Map<Arch, Array<string>>()\r\n        targets.set(platform, archToType)\r\n      }\r\n\r\n      if (types.length === 0) {\r\n        for (const arch of commonArch(false)) {\r\n          archToType.set(arch, [])\r\n        }\r\n        return\r\n      }\r\n\r\n      for (const type of types) {\r\n        const suffixPos = type.lastIndexOf(\":\")\r\n        if (suffixPos > 0) {\r\n          addValue(archToType, archFromString(type.substring(suffixPos + 1)), type.substring(0, suffixPos))\r\n        }\r\n        else {\r\n          for (const arch of commonArch(true)) {\r\n            addValue(archToType, arch, type)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (options.mac != null) {\r\n      processTargets(Platform.MAC, options.mac)\r\n    }\r\n    if (options.linux != null) {\r\n      processTargets(Platform.LINUX, options.linux)\r\n    }\r\n    if (options.win != null) {\r\n      processTargets(Platform.WINDOWS, options.win)\r\n    }\r\n\r\n    this.projectDir = options.projectDir == null ? process.cwd() : path.resolve(options.projectDir)\r\n    this._appDir = this.projectDir\r\n    this.options = {\r\n      ...options,\r\n      prepackaged: options.prepackaged == null ? null : path.resolve(this.projectDir, options.prepackaged)\r\n    }\r\n\r\n    try {\r\n      log.info({version: PACKAGE_VERSION}, \"electron-builder\")\r\n    }\r\n    catch (e) {\r\n      // error in dev mode without babel\r\n      if (!(e instanceof ReferenceError)) {\r\n        throw e\r\n      }\r\n    }\r\n  }\r\n\r\n  addAfterPackHandler(handler: (context: AfterPackContext) => Promise<any> | null) {\r\n    this.afterPackHandlers.push(handler)\r\n  }\r\n\r\n  artifactCreated(handler: (event: ArtifactCreated) => void): Packager {\r\n    addHandler(this.eventEmitter, \"artifactCreated\", handler)\r\n    return this\r\n  }\r\n\r\n  async callArtifactBuildStarted(event: ArtifactBuildStarted, logFields?: any): Promise<void> {\r\n    log.info(logFields || {\r\n      target: event.targetPresentableName,\r\n      arch: event.arch == null ? null : Arch[event.arch],\r\n      file: log.filePath(event.file),\r\n    }, \"building\")\r\n    const handler = resolveFunction(this.config.artifactBuildStarted, \"artifactBuildStarted\")\r\n    if (handler != null) {\r\n      await Promise.resolve(handler(event))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Only for sub artifacts (update info), for main artifacts use `callArtifactBuildCompleted`.\r\n   */\r\n  dispatchArtifactCreated(event: ArtifactCreated): void {\r\n    this.eventEmitter.emit(\"artifactCreated\", event)\r\n  }\r\n\r\n  async callArtifactBuildCompleted(event: ArtifactCreated): Promise<void> {\r\n    this.dispatchArtifactCreated(event)\r\n\r\n    const handler = resolveFunction(this.config.artifactBuildCompleted, \"artifactBuildCompleted\")\r\n    if (handler != null) {\r\n      await Promise.resolve(handler(event))\r\n    }\r\n  }\r\n\r\n  async build(): Promise<BuildResult> {\r\n    let configPath: string | null = null\r\n    let configFromOptions = this.options.config\r\n    if (typeof configFromOptions === \"string\") {\r\n      // it is a path to config file\r\n      configPath = configFromOptions\r\n      configFromOptions = null\r\n    }\r\n    else if (configFromOptions != null && configFromOptions.extends != null && configFromOptions.extends.includes(\".\")) {\r\n      configPath = configFromOptions.extends\r\n      delete configFromOptions.extends\r\n    }\r\n\r\n    const projectDir = this.projectDir\r\n\r\n    const devPackageFile = path.join(projectDir, \"package.json\")\r\n    this._devMetadata = await orNullIfFileNotExist(readPackageJson(devPackageFile))\r\n\r\n    const devMetadata = this.devMetadata\r\n    const configuration = await getConfig(projectDir, configPath, configFromOptions, new Lazy(() => Promise.resolve(devMetadata)))\r\n    if (log.isDebugEnabled) {\r\n      log.debug({config: getSafeEffectiveConfig(configuration)}, \"effective config\")\r\n    }\r\n\r\n    this._appDir = await computeDefaultAppDirectory(projectDir, configuration.directories!!.app)\r\n    this.isTwoPackageJsonProjectLayoutUsed = this._appDir !== projectDir\r\n\r\n    const appPackageFile = this.isTwoPackageJsonProjectLayoutUsed ? path.join(this.appDir, \"package.json\") : devPackageFile\r\n\r\n    // tslint:disable:prefer-conditional-expression\r\n    if (this.devMetadata != null && !this.isTwoPackageJsonProjectLayoutUsed) {\r\n      this._metadata = this.devMetadata\r\n    }\r\n    else {\r\n      this._metadata = await this.readProjectMetadataIfTwoPackageStructureOrPrepacked(appPackageFile)\r\n    }\r\n    deepAssign(this.metadata, configuration.extraMetadata)\r\n\r\n    if (this.isTwoPackageJsonProjectLayoutUsed) {\r\n      log.debug({devPackageFile, appPackageFile}, \"two package.json structure is used\")\r\n    }\r\n    checkMetadata(this.metadata, this.devMetadata, appPackageFile, devPackageFile)\r\n\r\n    return await this._build(configuration, this._metadata, this._devMetadata)\r\n  }\r\n\r\n  // external caller of this method always uses isTwoPackageJsonProjectLayoutUsed=false and appDir=projectDir, no way (and need) to use another values\r\n  async _build(configuration: Configuration, metadata: Metadata, devMetadata: Metadata | null, repositoryInfo?: SourceRepositoryInfo): Promise<BuildResult> {\r\n    await validateConfig(configuration, this.debugLogger)\r\n    this._configuration = configuration\r\n    this._metadata = metadata\r\n    this._devMetadata = devMetadata\r\n\r\n    if (repositoryInfo != null) {\r\n      this._repositoryInfo.value = Promise.resolve(repositoryInfo)\r\n    }\r\n\r\n    this._appInfo = new AppInfo(this, null)\r\n    this._framework = await createFrameworkInfo(this.config, this)\r\n\r\n    const commonOutDirWithoutPossibleOsMacro = path.resolve(this.projectDir, expandMacro(configuration.directories!!.output!!, null, this._appInfo, {\r\n      os: \"\",\r\n    }))\r\n\r\n    if (!isCI && (process.stdout as any).isTTY) {\r\n      const effectiveConfigFile = path.join(commonOutDirWithoutPossibleOsMacro, \"builder-effective-config.yaml\")\r\n      log.info({file: log.filePath(effectiveConfigFile)}, \"writing effective config\")\r\n      await outputFile(effectiveConfigFile, getSafeEffectiveConfig(configuration))\r\n    }\r\n\r\n    // because artifact event maybe dispatched several times for different publish providers\r\n    const artifactPaths = new Set<string>()\r\n    this.artifactCreated(event => {\r\n      if (event.file != null) {\r\n        artifactPaths.add(event.file)\r\n      }\r\n    })\r\n\r\n    const platformToTargets = await executeFinally(this.doBuild(), async () => {\r\n      if (this.debugLogger.isEnabled) {\r\n        await this.debugLogger.save(path.join(commonOutDirWithoutPossibleOsMacro, \"builder-debug.yml\"))\r\n      }\r\n      await this.tempDirManager.cleanup()\r\n    })\r\n\r\n    return {\r\n      outDir: commonOutDirWithoutPossibleOsMacro,\r\n      artifactPaths: Array.from(artifactPaths),\r\n      platformToTargets,\r\n      configuration,\r\n    }\r\n  }\r\n\r\n  private async readProjectMetadataIfTwoPackageStructureOrPrepacked(appPackageFile: string): Promise<Metadata> {\r\n    let data = await orNullIfFileNotExist(readPackageJson(appPackageFile))\r\n    if (data != null) {\r\n      return data\r\n    }\r\n\r\n    data = await orNullIfFileNotExist(readAsarJson(path.join(this.projectDir, \"app.asar\"), \"package.json\"))\r\n    if (data != null) {\r\n      this._isPrepackedAppAsar = true\r\n      return data\r\n    }\r\n\r\n    throw new Error(`Cannot find package.json in the ${path.dirname(appPackageFile)}`)\r\n  }\r\n\r\n  private async doBuild(): Promise<Map<Platform, Map<string, Target>>> {\r\n    const taskManager = new AsyncTaskManager(this.cancellationToken)\r\n\r\n    const platformToTarget = new Map<Platform, Map<string, Target>>()\r\n    const createdOutDirs = new Set<string>()\r\n\r\n    for (const [platform, archToType] of this.options.targets!) {\r\n      if (this.cancellationToken.cancelled) {\r\n        break\r\n      }\r\n\r\n      if (platform === Platform.MAC && process.platform === Platform.WINDOWS.nodeName) {\r\n        throw new InvalidConfigurationError(\"Build for macOS is supported only on macOS, please see https://electron.build/multi-platform-build\")\r\n      }\r\n\r\n      const packager = this.createHelper(platform)\r\n      const nameToTarget: Map<string, Target> = new Map()\r\n      platformToTarget.set(platform, nameToTarget)\r\n\r\n      for (const [arch, targetNames] of computeArchToTargetNamesMap(archToType, packager.platformSpecificBuildOptions, platform)) {\r\n        if (this.cancellationToken.cancelled) {\r\n          break\r\n        }\r\n\r\n        await this.installAppDependencies(platform, arch)\r\n\r\n        if (this.cancellationToken.cancelled) {\r\n          break\r\n        }\r\n\r\n        // support os and arch macro in output value\r\n        const outDir = path.resolve(this.projectDir, packager.expandMacro(this._configuration!!.directories!!.output!!, Arch[arch]))\r\n        const targetList = createTargets(nameToTarget, targetNames.length === 0 ? packager.defaultTarget : targetNames, outDir, packager)\r\n        await createOutDirIfNeed(targetList, createdOutDirs)\r\n        await packager.pack(outDir, arch, targetList, taskManager)\r\n      }\r\n\r\n      if (this.cancellationToken.cancelled) {\r\n        break\r\n      }\r\n\r\n      for (const target of nameToTarget.values()) {\r\n        taskManager.addTask(target.finishBuild())\r\n      }\r\n    }\r\n\r\n    await taskManager.awaitTasks()\r\n    return platformToTarget\r\n  }\r\n\r\n  private createHelper(platform: Platform): PlatformPackager<any> {\r\n    if (this.options.platformPackagerFactory != null) {\r\n      return this.options.platformPackagerFactory!(this, platform)\r\n    }\r\n\r\n    switch (platform) {\r\n      case Platform.MAC: {\r\n        const helperClass: typeof MacPackager = require(\"./macPackager\").default\r\n        return new helperClass(this)\r\n      }\r\n\r\n      case Platform.WINDOWS: {\r\n        const helperClass: typeof WinPackager = require(\"./winPackager\").WinPackager\r\n        return new helperClass(this)\r\n      }\r\n\r\n      case Platform.LINUX:\r\n        return new (require(\"./linuxPackager\").LinuxPackager)(this)\r\n\r\n      default:\r\n        throw new Error(`Unknown platform: ${platform}`)\r\n    }\r\n  }\r\n\r\n  private async installAppDependencies(platform: Platform, arch: Arch): Promise<any> {\r\n    if (this.options.prepackaged != null || this.framework.isNpmRebuildRequired !== true) {\r\n      return\r\n    }\r\n\r\n    const frameworkInfo = {version: this.framework.version, useCustomDist: this.config.muonVersion == null}\r\n    const config = this.config\r\n    if (config.nodeGypRebuild === true) {\r\n      log.info({arch: Arch[arch]}, \"executing node-gyp rebuild\")\r\n      await exec(process.platform === \"win32\" ? \"node-gyp.cmd\" : \"node-gyp\", [\"rebuild\"], {\r\n        env: getGypEnv(frameworkInfo, platform.nodeName, Arch[arch], true),\r\n      })\r\n    }\r\n\r\n    if (config.npmRebuild === false) {\r\n      log.info({reason: \"npmRebuild is set to false\"}, \"skipped app dependencies rebuild\")\r\n      return\r\n    }\r\n\r\n    const beforeBuild = resolveFunction(config.beforeBuild, \"beforeBuild\")\r\n    if (beforeBuild != null) {\r\n      const performDependenciesInstallOrRebuild = await beforeBuild({\r\n        appDir: this.appDir,\r\n        electronVersion: this.config.electronVersion!,\r\n        platform,\r\n        arch: Arch[arch]\r\n      })\r\n\r\n      // If beforeBuild resolves to false, it means that handling node_modules is done outside of electron-builder.\r\n      this._nodeModulesHandledExternally = !performDependenciesInstallOrRebuild\r\n      if (!performDependenciesInstallOrRebuild) {\r\n        return\r\n      }\r\n    }\r\n\r\n    if (config.buildDependenciesFromSource === true && platform.nodeName !== process.platform) {\r\n      log.info({reason: \"platform is different and buildDependenciesFromSource is set to true\"}, \"skipped app dependencies rebuild\")\r\n    }\r\n    else {\r\n      await installOrRebuild(config, this.appDir, {\r\n        frameworkInfo,\r\n        platform: platform.nodeName,\r\n        arch: Arch[arch],\r\n        productionDeps: this.productionDeps,\r\n      })\r\n    }\r\n  }\r\n\r\n  afterPack(context: AfterPackContext): Promise<any> {\r\n    const afterPack = resolveFunction(this.config.afterPack, \"afterPack\")\r\n    const handlers = this.afterPackHandlers.slice()\r\n    if (afterPack != null) {\r\n      // user handler should be last\r\n      handlers.push(afterPack)\r\n    }\r\n    return BluebirdPromise.each(handlers, it => it(context))\r\n  }\r\n}\r\n\r\nfunction createOutDirIfNeed(targetList: Array<Target>, createdOutDirs: Set<string>): Promise<any> {\r\n  const ourDirs = new Set<string>()\r\n  for (const target of targetList) {\r\n    // noinspection SuspiciousInstanceOfGuard\r\n    if (target instanceof NoOpTarget) {\r\n      continue\r\n    }\r\n\r\n    const outDir = (target as Target).outDir\r\n    if (!createdOutDirs.has(outDir)) {\r\n      ourDirs.add(outDir)\r\n    }\r\n  }\r\n\r\n  if (ourDirs.size > 0) {\r\n    return BluebirdPromise.map(Array.from(ourDirs).sort(), it => {\r\n      createdOutDirs.add(it)\r\n      return ensureDir(it)\r\n    })\r\n  }\r\n  return Promise.resolve()\r\n}\r\n\r\nexport interface BuildResult {\r\n  readonly outDir: string\r\n  readonly artifactPaths: Array<string>\r\n  readonly platformToTargets: Map<Platform, Map<string, Target>>\r\n  readonly configuration: Configuration\r\n}\r\n\r\nfunction getSafeEffectiveConfig(configuration: Configuration): string {\r\n  const o = JSON.parse(safeStringifyJson(configuration))\r\n  if (o.cscLink != null) {\r\n    o.cscLink = \"<hidden by builder>\"\r\n  }\r\n  return serializeToYaml(o, true)\r\n}"],"sourceRoot":""}
