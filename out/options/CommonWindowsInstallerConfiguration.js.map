{"version":3,"sources":["../../src/options/CommonWindowsInstallerConfiguration.ts"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAqDM,SAAU,mBAAV,CAA8B,OAA9B,EAA4E,QAA5E,EAAiG;AACrG,QAAM,OAAO,GAAG,QAAQ,CAAC,OAAzB;AAEA,MAAI,YAAY,GAAkB,IAAlC;;AACA,MAAI,OAAO,CAAC,YAAR,IAAwB,IAAxB,IAAgC,OAAO,CAAC,YAAR,KAAyB,KAA7D,EAAoE;AAClE,QAAI,OAAO,CAAC,YAAR,KAAyB,IAA7B,EAAmC;AACjC,YAAM,WAAW,GAAG,QAAQ,CAAC,OAAT,CAAiB,WAArC;;AACA,UAAI,WAAW,IAAI,IAAnB,EAAyB;AACvB,cAAM,KAAI,wCAAJ,EAA8B,iHAA9B,CAAN;AACD;;AACD,MAAA,YAAY,GAAG,iCAAiB,WAAjB,CAAf;AACD,KAND,MAOK;AACH,MAAA,YAAY,GAAI,OAAO,CAAC,YAAR,CAAgC,KAAhC,CAAsC,QAAtC,EAAgD,GAAhD,CAAoD,EAAE,IAAI,iCAAiB,EAAjB,CAA1D,EAAgF,IAAhF,CAAqF,IAArF,CAAhB;AACD;AACF;;AAED,SAAO;AACL,IAAA,YAAY,EAAE,OAAO,CAAC,UAAR,KAAuB,IADhC;AAEL,IAAA,UAAU,EAAE,OAAO,CAAC,QAAR,KAAqB,KAF5B;AAIL,IAAA,YAAY,EAAE,oCAAgB,OAAO,CAAC,YAAxB,IAAwC,OAAO,CAAC,eAAhD,GAAkE,QAAQ,CAAC,WAAT,CAAqB,OAAO,CAAC,YAA7B,CAJ3E;AAKL,IAAA,uBAAuB,EAAE,sCAAsC,CAAC,OAAO,CAAC,qBAAT,CAL1D;AAML,IAAA,yBAAyB,EAAE,OAAO,CAAC,uBAAR,KAAoC,KAN1D;AAOL,IAAA;AAPK,GAAP;AASD;;AAED,SAAS,sCAAT,CAAgD,KAAhD,EAAmF;AACjF,MAAI,KAAK,KAAK,KAAd,EAAqB;AACnB,WAAO,6BAA6B,CAAC,KAArC;AACD,GAFD,MAGK,IAAI,KAAK,KAAK,QAAd,EAAwB;AAC3B,WAAO,6BAA6B,CAAC,MAArC;AACD,GAFI,MAGA;AACH,WAAO,6BAA6B,CAAC,aAArC;AACD;AACF;;AAED,IAAY,6BAAZ;;;AAAA,CAAA,UAAY,6BAAZ,EAAyC;AACvC,EAAA,6BAAA,CAAA,6BAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAA;AAAe,EAAA,6BAAA,CAAA,6BAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AAAQ,EAAA,6BAAA,CAAA,6BAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACxB,CAFD,EAAY,6BAA6B,6CAA7B,6BAA6B,GAAA,EAAA,CAAzC,E","sourcesContent":["import { InvalidConfigurationError, isEmptyOrSpaces } from \"builder-util\"\r\nimport sanitizeFileName from \"sanitize-filename\"\r\nimport { WinPackager } from \"../winPackager\"\r\n\r\nexport interface CommonWindowsInstallerConfiguration {\r\n  readonly oneClick?: boolean\r\n\r\n  /**\r\n   * Whether to install per all users (per-machine).\r\n   * @default false\r\n   */\r\n  readonly perMachine?: boolean\r\n\r\n  /**\r\n   * Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.\r\n   * @default true\r\n   */\r\n  readonly runAfterFinish?: boolean\r\n\r\n  /**\r\n   * Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).\r\n   * @default true\r\n   */\r\n  readonly createDesktopShortcut?: boolean | \"always\"\r\n\r\n  /**\r\n   * Whether to create start menu shortcut.\r\n   * @default true\r\n   */\r\n  readonly createStartMenuShortcut?: boolean\r\n\r\n  /**\r\n   * Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.\r\n   * @default false\r\n   */\r\n  readonly menuCategory?: boolean | string\r\n\r\n  /**\r\n   * The name that will be used for all shortcuts. Defaults to the application name.\r\n   */\r\n  readonly shortcutName?: string | null\r\n}\r\n\r\nexport interface FinalCommonWindowsInstallerOptions {\r\n  isAssisted: boolean\r\n  isPerMachine: boolean\r\n\r\n  shortcutName: string\r\n  menuCategory: string | null\r\n\r\n  isCreateDesktopShortcut: DesktopShortcutCreationPolicy\r\n  isCreateStartMenuShortcut: boolean\r\n}\r\n\r\nexport function getEffectiveOptions(options: CommonWindowsInstallerConfiguration, packager: WinPackager): FinalCommonWindowsInstallerOptions {\r\n  const appInfo = packager.appInfo\r\n\r\n  let menuCategory: string | null = null\r\n  if (options.menuCategory != null && options.menuCategory !== false) {\r\n    if (options.menuCategory === true) {\r\n      const companyName = packager.appInfo.companyName\r\n      if (companyName == null) {\r\n        throw new InvalidConfigurationError(`Please specify \"author\" in the application package.json â€” it is required because \"menuCategory\" is set to true.`)\r\n      }\r\n      menuCategory = sanitizeFileName(companyName)\r\n    }\r\n    else {\r\n      menuCategory = (options.menuCategory as string).split(/[\\/\\\\]/).map(it => sanitizeFileName(it)).join(\"\\\\\")\r\n    }\r\n  }\r\n\r\n  return {\r\n    isPerMachine: options.perMachine === true,\r\n    isAssisted: options.oneClick === false,\r\n\r\n    shortcutName: isEmptyOrSpaces(options.shortcutName) ? appInfo.productFilename : packager.expandMacro(options.shortcutName!!),\r\n    isCreateDesktopShortcut: convertToDesktopShortcutCreationPolicy(options.createDesktopShortcut),\r\n    isCreateStartMenuShortcut: options.createStartMenuShortcut !== false,\r\n    menuCategory,\r\n  }\r\n}\r\n\r\nfunction convertToDesktopShortcutCreationPolicy(value: boolean | undefined | string): DesktopShortcutCreationPolicy {\r\n  if (value === false) {\r\n    return DesktopShortcutCreationPolicy.NEVER\r\n  }\r\n  else if (value === \"always\") {\r\n    return DesktopShortcutCreationPolicy.ALWAYS\r\n  }\r\n  else {\r\n    return DesktopShortcutCreationPolicy.FRESH_INSTALL\r\n  }\r\n}\r\n\r\nexport enum DesktopShortcutCreationPolicy {\r\n  FRESH_INSTALL, ALWAYS, NEVER\r\n}"],"sourceRoot":""}
