{"version":3,"sources":["../../src/remoteBuilder/builder-cli.ts"],"names":[],"mappings":"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","sourcesContent":["import { readJson, writeFile } from \"fs-extra-p\"\r\nimport * as path from \"path\"\r\nimport { UploadTask, Arch, Packager, PackagerOptions, PublishOptions } from \"..\"\r\nimport SnapTarget from \"../targets/snap\"\r\n\r\nif (process.env.BUILDER_REMOVE_STAGE_EVEN_IF_DEBUG == null) {\r\n  process.env.BUILDER_REMOVE_STAGE_EVEN_IF_DEBUG = \"true\"\r\n}\r\n\r\nasync function doBuild(data: BuildTask): Promise<void> {\r\n  if (process.env.APP_BUILDER_TMP_DIR == null) {\r\n    throw new Error(\"Env APP_BUILDER_TMP_DIR must be set for builder process\")\r\n  }\r\n\r\n  const projectDir = process.env.PROJECT_DIR\r\n  if (projectDir == null) {\r\n    throw new Error(\"Env PROJECT_DIR must be set for builder process\")\r\n  }\r\n\r\n  const targets = data.targets\r\n  if (data.platform == null) {\r\n    throw new Error(\"platform not specified\")\r\n  }\r\n  if (targets == null) {\r\n    throw new Error(\"targets path not specified\")\r\n  }\r\n  if (!Array.isArray(targets)) {\r\n    throw new Error(\"targets must be array of target name\")\r\n  }\r\n\r\n  const infoFile = projectDir + path.sep + \"info.json\"\r\n  const info = await readJson(infoFile)\r\n\r\n  const projectOutDir = process.env.PROJECT_OUT_DIR\r\n  if (projectDir == null) {\r\n    throw new Error(\"Env PROJECT_OUT_DIR must be set for builder process\")\r\n  }\r\n\r\n  // yes, for now we expect the only target\r\n  const prepackaged = projectDir + path.sep + targets[0].unpackedDirName\r\n  // do not use build function because we don't need to publish artifacts\r\n  const options: PackagerOptions & PublishOptions = {\r\n    prepackaged,\r\n    projectDir,\r\n    [data.platform]: targets.map(it => it.name + \":\" + it.arch),\r\n    publish: \"never\",\r\n  }\r\n  const packager = new Packager(options)\r\n\r\n  const artifacts: Array<ArtifactInfo> = []\r\n  const relativePathOffset = projectOutDir!!.length + 1\r\n  packager.artifactCreated(event => {\r\n    if (event.file == null) {\r\n      return\r\n    }\r\n\r\n    artifacts.push({\r\n      file: event.file.substring(relativePathOffset),\r\n      target: event.target == null ? null : event.target.name,\r\n      arch: event.arch,\r\n      safeArtifactName: event.safeArtifactName,\r\n      isWriteUpdateInfo: event.isWriteUpdateInfo === true,\r\n      updateInfo: event.updateInfo,\r\n    })\r\n  })\r\n\r\n  packager.stageDirPathCustomizer = (target, packager, arch) => {\r\n    // snap creates a lot of files and so, we cannot use tmpfs to avoid out of memory error\r\n    const parentDir = target.name === \"snap\" && !(target as SnapTarget).isUseTemplateApp ? projectOutDir : projectDir\r\n    return parentDir + path.sep + `__${target.name}-${Arch[arch]}`\r\n  }\r\n\r\n  // _build method expects final effective configuration - packager.options.config is ignored\r\n  await packager._build({\r\n    ...info.configuration,\r\n    publish: null,\r\n    beforeBuild: null,\r\n    afterPack: null,\r\n    afterSign: null,\r\n    afterAllArtifactBuild: null,\r\n    onNodeModuleFile: null,\r\n    directories: {\r\n      output: projectOutDir,\r\n      buildResources: projectDir + path.sep + info.buildResourceDirName\r\n    },\r\n  }, info.metadata, info.devMetadata, info.repositoryInfo)\r\n\r\n  // writeJson must be not used because it adds unwanted \\n as last file symbol\r\n  await writeFile(path.join(process.env.APP_BUILDER_TMP_DIR!!, \"__build-result.json\"), JSON.stringify(artifacts))\r\n}\r\n\r\ndoBuild(JSON.parse(process.argv[2]))\r\n  .catch(error => {\r\n    process.exitCode = 0\r\n    return writeFile(path.join(process.env.APP_BUILDER_TMP_DIR!!, \"__build-result.json\"), (error.stack || error).toString())\r\n  })\r\n\r\ninterface TargetInfo {\r\n  name: string\r\n  arch: string\r\n  unpackedDirName: string\r\n}\r\n\r\ninterface ArtifactInfo extends UploadTask {\r\n  target: string | null\r\n\r\n  readonly isWriteUpdateInfo?: boolean\r\n  readonly updateInfo?: any\r\n}\r\n\r\ninterface BuildTask {\r\n  platform: string\r\n  targets: Array<TargetInfo>\r\n}"],"sourceRoot":""}
