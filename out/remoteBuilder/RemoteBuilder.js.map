{"version":3,"sources":["../../src/remoteBuilder/RemoteBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\r\nimport { Arch, isEnvTrue, log, InvalidConfigurationError } from \"builder-util\"\r\nimport * as path from \"path\"\r\nimport { UploadTask } from \"electron-publish/out/publisher\"\r\nimport { Target, TargetSpecificOptions } from \"../core\"\r\nimport { ArtifactCreated } from \"../packagerApi\"\r\nimport { PlatformPackager } from \"../platformPackager\"\r\nimport { executeAppBuilderAsJson } from \"../util/appBuilder\"\r\nimport { ProjectInfoManager } from \"./ProjectInfoManager\"\r\n\r\ninterface TargetInfo {\r\n  name: string\r\n  arch: string\r\n  unpackedDirectory: string\r\n  outDir: string\r\n}\r\n\r\nexport class RemoteBuilder {\r\n  private readonly toBuild = new Map<Arch, Array<TargetInfo>>()\r\n  private buildStarted = false\r\n\r\n  constructor(readonly packager: PlatformPackager<any>) {\r\n  }\r\n\r\n  scheduleBuild(target: Target, arch: Arch, unpackedDirectory: string) {\r\n    if (!isEnvTrue(process.env._REMOTE_BUILD) && this.packager.config.remoteBuild === false) {\r\n      throw new Error(\"Target is not supported on your OS and using of Electron Build Service is disabled (\\\"remoteBuild\\\" option)\")\r\n    }\r\n\r\n    let list = this.toBuild.get(arch)\r\n    if (list == null) {\r\n      list = []\r\n      this.toBuild.set(arch, list)\r\n    }\r\n\r\n    list.push({\r\n      name: target.name,\r\n      arch: Arch[arch],\r\n      unpackedDirectory,\r\n      outDir: target.outDir,\r\n    })\r\n  }\r\n\r\n  build(): Promise<any> {\r\n    if (this.buildStarted) {\r\n      return Promise.resolve()\r\n    }\r\n\r\n    this.buildStarted = true\r\n\r\n    return BluebirdPromise.mapSeries(Array.from(this.toBuild.keys()), (arch: Arch) => {\r\n      return this._build(this.toBuild.get(arch)!!, this.packager)\r\n    })\r\n  }\r\n\r\n  // noinspection JSMethodCanBeStatic\r\n  private async _build(targets: Array<TargetInfo>, packager: PlatformPackager<any>): Promise<void> {\r\n    if (log.isDebugEnabled) {\r\n      log.debug({remoteTargets: JSON.stringify(targets, null, 2)}, \"remote building\")\r\n    }\r\n\r\n    const projectInfoManager = new ProjectInfoManager(packager.info)\r\n\r\n    // let result: RemoteBuilderResponse | null = null\r\n    const req = Buffer.from(JSON.stringify({\r\n      targets: targets.map(it => {\r\n        return {\r\n          name: it.name,\r\n          arch: it.arch,\r\n          unpackedDirName: path.basename(it.unpackedDirectory),\r\n        }\r\n      }),\r\n      platform: packager.platform.buildConfigurationKey,\r\n    })).toString(\"base64\")\r\n    const outDir = targets[0].outDir\r\n    const args = [\"remote-build\", \"--request\", req, \"--output\", outDir]\r\n\r\n    args.push(\"--file\", targets[0].unpackedDirectory)\r\n    args.push(\"--file\", await projectInfoManager.infoFile.value)\r\n\r\n    const buildResourcesDir = packager.buildResourcesDir\r\n    if (buildResourcesDir === packager.projectDir) {\r\n      throw new InvalidConfigurationError(`Build resources dir equals to project dir and so, not sent to remote build agent. It will lead to incorrect results.\\nPlease set \"directories.buildResources\" to separate dir or leave default (\"build\" directory in the project root)`)\r\n    }\r\n\r\n    args.push(\"--build-resource-dir\", buildResourcesDir)\r\n\r\n    const result: any = await executeAppBuilderAsJson(args)\r\n    if (result.error != null) {\r\n      throw new InvalidConfigurationError(`Remote builder error (if you think that it is not your application misconfiguration issue, please file issue to https://github.com/electron-userland/electron-builder/issues):\\n\\n${result.error}`, \"REMOTE_BUILDER_ERROR\")\r\n    }\r\n    else if (result.files != null) {\r\n      for (const artifact of result.files) {\r\n        const localFile = path.join(outDir, artifact.file)\r\n        const artifactCreatedEvent = this.artifactInfoToArtifactCreatedEvent(artifact, localFile, outDir)\r\n        // PublishManager uses outDir and options, real (the same as for local build) values must be used\r\n        await this.packager.info.callArtifactBuildCompleted(artifactCreatedEvent)\r\n      }\r\n    }\r\n  }\r\n\r\n  private artifactInfoToArtifactCreatedEvent(artifact: ArtifactInfo, localFile: string, outDir: string): ArtifactCreated {\r\n    const target = artifact.target\r\n    // noinspection SpellCheckingInspection\r\n    return {\r\n      ...artifact,\r\n      file: localFile,\r\n      target: target == null ? null : new FakeTarget(target, outDir, (this.packager.config as any)[target]),\r\n      packager: this.packager,\r\n    }\r\n  }\r\n}\r\n\r\nclass FakeTarget extends Target {\r\n  constructor(name: string, readonly outDir: string, readonly options: TargetSpecificOptions | null | undefined) {\r\n    super(name)\r\n  }\r\n\r\n  async build(appOutDir: string, arch: Arch) {\r\n    // no build\r\n  }\r\n}\r\n\r\ninterface ArtifactInfo extends UploadTask {\r\n  target: string | null\r\n\r\n  readonly isWriteUpdateInfo?: boolean\r\n  readonly updateInfo?: any\r\n}\r\n\r\nexport interface RemoteBuilderResponse {\r\n  files: Array<ArtifactInfo> | null\r\n  error: string | null\r\n}"],"sourceRoot":""}
