{"version":3,"sources":["../../src/codeSign/macCodeSign.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\r\nimport { exec, InvalidConfigurationError, isEmptyOrSpaces, isEnvTrue, isPullRequest, log, TmpDir } from \"builder-util/out/util\"\r\nimport { copyFile, unlinkIfExists } from \"builder-util/out/fs\"\r\nimport { Fields, Logger } from \"builder-util/out/log\"\r\nimport { randomBytes } from \"crypto\"\r\nimport { rename } from \"fs-extra-p\"\r\nimport { Lazy } from \"lazy-val\"\r\nimport { homedir } from \"os\"\r\nimport * as path from \"path\"\r\nimport { getTempName } from \"temp-file\"\r\nimport { isAutoDiscoveryCodeSignIdentity } from \"../util/flags\"\r\nimport { isMacOsSierra } from \"../util/macosVersion\"\r\nimport { downloadCertificate } from \"./codesign\"\r\n\r\nexport const appleCertificatePrefixes = [\"Developer ID Application:\", \"Developer ID Installer:\", \"3rd Party Mac Developer Application:\", \"3rd Party Mac Developer Installer:\"]\r\n\r\nexport type CertType = \"Developer ID Application\" | \"Developer ID Installer\" | \"3rd Party Mac Developer Application\" | \"3rd Party Mac Developer Installer\" | \"Mac Developer\"\r\n\r\nexport interface CodeSigningInfo {\r\n  keychainName?: string | null\r\n}\r\n\r\nexport function isSignAllowed(isPrintWarn = true): boolean {\r\n  if (process.platform !== \"darwin\") {\r\n    if (isPrintWarn) {\r\n      log.warn({reason: \"supported only on macOS\"}, \"skipped macOS application code signing\")\r\n    }\r\n    return false\r\n  }\r\n\r\n  const buildForPrWarning = \"There are serious security concerns with CSC_FOR_PULL_REQUEST=true (see the  CircleCI documentation (https://circleci.com/docs/1.0/fork-pr-builds/) for details)\" +\r\n    \"\\nIf you have SSH keys, sensitive env vars or AWS credentials stored in your project settings and untrusted forks can make pull requests against your repo, then this option isn't for you.\"\r\n\r\n  if (isPullRequest()) {\r\n    if (isEnvTrue(process.env.CSC_FOR_PULL_REQUEST)) {\r\n      if (isPrintWarn) {\r\n        log.warn(buildForPrWarning)\r\n      }\r\n    }\r\n    else {\r\n      if (isPrintWarn) {\r\n        // https://github.com/electron-userland/electron-builder/issues/1524\r\n        log.warn(\"Current build is a part of pull request, code signing will be skipped.\" +\r\n          \"\\nSet env CSC_FOR_PULL_REQUEST to true to force code signing.\" +\r\n          `\\n${buildForPrWarning}`)\r\n      }\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nexport async function reportError(isMas: boolean, certificateType: CertType, qualifier: string | null | undefined, keychainName: string | null | undefined, isForceCodeSigning: boolean) {\r\n  const logFields: Fields = {}\r\n  if (qualifier == null) {\r\n    logFields.reason = \"\"\r\n    if (isAutoDiscoveryCodeSignIdentity()) {\r\n      logFields.reason += `cannot find valid \"${certificateType}\" identity${(isMas ? \"\" : ` or custom non-Apple code signing certificate`)}`\r\n    }\r\n    logFields.reason += \", see https://electron.build/code-signing\"\r\n    if (!isAutoDiscoveryCodeSignIdentity()) {\r\n      logFields.CSC_IDENTITY_AUTO_DISCOVERY = false\r\n    }\r\n  }\r\n  else {\r\n    logFields.reason = \"Identity name is specified, but no valid identity with this name in the keychain\"\r\n    logFields.identity = qualifier\r\n  }\r\n\r\n  const args = [\"find-identity\"]\r\n  if (keychainName != null) {\r\n    args.push(keychainName)\r\n  }\r\n\r\n  if (qualifier != null || isAutoDiscoveryCodeSignIdentity()) {\r\n    logFields.allIdentities = (await exec(\"security\", args))\r\n      .trim()\r\n      .split(\"\\n\")\r\n      .filter(it => !(it.includes(\"Policy: X.509 Basic\") || it.includes(\"Matching identities\")))\r\n      .join(\"\\n\")\r\n  }\r\n\r\n  if (isMas || isForceCodeSigning) {\r\n    throw new Error(Logger.createMessage(\"skipped macOS application code signing\", logFields, \"error\", it => it))\r\n  }\r\n  else {\r\n    log.warn(logFields, \"skipped macOS application code signing\")\r\n  }\r\n}\r\n\r\n// \"Note that filename will not be searched to resolve the signing identity's certificate chain unless it is also on the user's keychain search list.\"\r\n// but \"security list-keychains\" doesn't support add - we should 1) get current list 2) set new list - it is very bad http://stackoverflow.com/questions/10538942/add-a-keychain-to-search-list\r\n// \"overly complicated and introduces a race condition.\"\r\n// https://github.com/electron-userland/electron-builder/issues/398\r\nconst bundledCertKeychainAdded = new Lazy<void>(async () => {\r\n  // copy to temp and then atomic rename to final path\r\n  const cacheDir = getCacheDirectory()\r\n  const tmpKeychainPath = path.join(cacheDir, getTempName(\"electron-builder-root-certs\"))\r\n  const keychainPath = path.join(cacheDir, \"electron-builder-root-certs.keychain\")\r\n  const results = await Promise.all<any>([\r\n    listUserKeychains(),\r\n    copyFile(path.join(__dirname, \"..\", \"..\", \"certs\", \"root_certs.keychain\"), tmpKeychainPath)\r\n      .then(() => rename(tmpKeychainPath, keychainPath)),\r\n  ])\r\n  const list = results[0]\r\n  if (!list.includes(keychainPath)) {\r\n    await exec(\"security\", [\"list-keychains\", \"-d\", \"user\", \"-s\", keychainPath].concat(list))\r\n  }\r\n})\r\n\r\nfunction getCacheDirectory(): string {\r\n  const env = process.env.ELECTRON_BUILDER_CACHE\r\n  return isEmptyOrSpaces(env) ? path.join(homedir(), \"Library\", \"Caches\", \"electron-builder\") : path.resolve(env!!)\r\n}\r\n\r\nfunction listUserKeychains(): Promise<Array<string>> {\r\n  return exec(\"security\", [\"list-keychains\", \"-d\", \"user\"])\r\n    .then(it => it\r\n      .split(\"\\n\")\r\n      .map(it => {\r\n        const r = it.trim()\r\n        return r.substring(1, r.length - 1)\r\n      })\r\n      .filter(it => it.length > 0))\r\n}\r\n\r\nexport interface CreateKeychainOptions {\r\n  tmpDir: TmpDir\r\n  cscLink: string\r\n  cscKeyPassword: string\r\n  cscILink?: string | null\r\n  cscIKeyPassword?: string | null\r\n  currentDir: string\r\n}\r\n\r\nasync function removeKeychain(keychainFile: string) {\r\n  try {\r\n    await exec(\"security\", [\"delete-keychain\", keychainFile])\r\n  }\r\n  catch (e) {\r\n    console.warn(`Cannot delete keychain ${keychainFile}: ${e.stack || e}`)\r\n    await unlinkIfExists(keychainFile)\r\n  }\r\n}\r\n\r\nexport async function createKeychain({tmpDir, cscLink, cscKeyPassword, cscILink, cscIKeyPassword, currentDir}: CreateKeychainOptions): Promise<CodeSigningInfo> {\r\n  // travis has correct AppleWWDRCA cert\r\n  if (process.env.TRAVIS !== \"true\") {\r\n    await bundledCertKeychainAdded.value\r\n  }\r\n\r\n  const keychainFile = await tmpDir.getTempFile({suffix: \".keychain\", disposer: removeKeychain})\r\n\r\n  const certLinks = [cscLink]\r\n  if (cscILink != null) {\r\n    certLinks.push(cscILink)\r\n  }\r\n\r\n  const certPaths = new Array(certLinks.length)\r\n  const keychainPassword = randomBytes(8).toString(\"base64\")\r\n  const securityCommands = [\r\n    [\"create-keychain\", \"-p\", keychainPassword, keychainFile],\r\n    [\"unlock-keychain\", \"-p\", keychainPassword, keychainFile],\r\n    [\"set-keychain-settings\", keychainFile]\r\n  ]\r\n\r\n  // https://stackoverflow.com/questions/42484678/codesign-keychain-gets-ignored\r\n  // https://github.com/electron-userland/electron-builder/issues/1457\r\n  const list = await listUserKeychains()\r\n  if (!list.includes(keychainFile)) {\r\n    securityCommands.push([\"list-keychains\", \"-d\", \"user\", \"-s\", keychainFile].concat(list))\r\n  }\r\n\r\n  await Promise.all([\r\n    // we do not clear downloaded files - will be removed on tmpDir cleanup automatically. not a security issue since in any case data is available as env variables and protected by password.\r\n    BluebirdPromise.map(certLinks, (link, i) => downloadCertificate(link, tmpDir, currentDir).then(it => certPaths[i] = it)),\r\n    BluebirdPromise.mapSeries(securityCommands, it => exec(\"security\", it))\r\n  ])\r\n  return await importCerts(keychainFile, certPaths, [cscKeyPassword, cscIKeyPassword].filter(it => it != null) as Array<string>)\r\n}\r\n\r\nasync function importCerts(keychainName: string, paths: Array<string>, keyPasswords: Array<string>): Promise<CodeSigningInfo> {\r\n  for (let i = 0; i < paths.length; i++) {\r\n    const password = keyPasswords[i]\r\n    await exec(\"security\", [\"import\", paths[i], \"-k\", keychainName, \"-T\", \"/usr/bin/codesign\", \"-T\", \"/usr/bin/productbuild\", \"-P\", password])\r\n\r\n    // https://stackoverflow.com/questions/39868578/security-codesign-in-sierra-keychain-ignores-access-control-settings-and-ui-p\r\n    // https://github.com/electron-userland/electron-packager/issues/701#issuecomment-322315996\r\n    if (await isMacOsSierra()) {\r\n      await exec(\"security\", [\"set-key-partition-list\", \"-S\", \"apple-tool:,apple:\", \"-s\", \"-k\", password, keychainName])\r\n    }\r\n  }\r\n\r\n  return {\r\n    keychainName,\r\n  }\r\n}\r\n\r\n/** @private */\r\nexport function sign(path: string, name: string, keychain: string): Promise<any> {\r\n  const args = [\"--deep\", \"--force\", \"--sign\", name, path]\r\n  if (keychain != null) {\r\n    args.push(\"--keychain\", keychain)\r\n  }\r\n  return exec(\"codesign\", args)\r\n}\r\n\r\nexport let findIdentityRawResult: Promise<Array<string>> | null = null\r\n\r\nasync function getValidIdentities(keychain?: string | null): Promise<Array<string>> {\r\n  function addKeychain(args: Array<string>) {\r\n    if (keychain != null) {\r\n      args.push(keychain)\r\n    }\r\n    return args\r\n  }\r\n\r\n  let result = findIdentityRawResult\r\n  if (result == null || keychain != null) {\r\n    // https://github.com/electron-userland/electron-builder/issues/481\r\n    // https://github.com/electron-userland/electron-builder/issues/535\r\n    result = Promise.all<Array<string>>([\r\n      exec(\"security\", addKeychain([\"find-identity\", \"-v\"]))\r\n        .then(it => it.trim().split(\"\\n\").filter(it => {\r\n          for (const prefix of appleCertificatePrefixes) {\r\n            if (it.includes(prefix)) {\r\n              return true\r\n            }\r\n          }\r\n          return false\r\n        })),\r\n      exec(\"security\", addKeychain([\"find-identity\", \"-v\", \"-p\", \"codesigning\"]))\r\n        .then(it => it.trim().split((\"\\n\"))),\r\n    ])\r\n      .then(it => {\r\n        const array = it[0].concat(it[1])\r\n          .filter(it => !it.includes(\"(Missing required extension)\") && !it.includes(\"valid identities found\") && !it.includes(\"iPhone \") && !it.includes(\"com.apple.idms.appleid.prd.\"))\r\n          // remove 1)\r\n          .map(it => it.substring(it.indexOf(\")\") + 1).trim())\r\n        return Array.from(new Set(array))\r\n      })\r\n\r\n    if (keychain == null) {\r\n      findIdentityRawResult = result\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\nasync function _findIdentity(type: CertType, qualifier?: string | null, keychain?: string | null): Promise<Identity | null> {\r\n  // https://github.com/electron-userland/electron-builder/issues/484\r\n  //noinspection SpellCheckingInspection\r\n  const lines = await getValidIdentities(keychain)\r\n  const namePrefix = `${type}:`\r\n  for (const line of lines) {\r\n    if (qualifier != null && !line.includes(qualifier)) {\r\n      continue\r\n    }\r\n\r\n    if (line.includes(namePrefix)) {\r\n      return parseIdentity(line)\r\n    }\r\n  }\r\n\r\n  if (type === \"Developer ID Application\") {\r\n    // find non-Apple certificate\r\n    // https://github.com/electron-userland/electron-builder/issues/458\r\n    l: for (const line of lines) {\r\n      if (qualifier != null && !line.includes(qualifier)) {\r\n        continue\r\n      }\r\n\r\n      if (line.includes(\"Mac Developer:\")) {\r\n        continue\r\n      }\r\n\r\n      for (const prefix of appleCertificatePrefixes) {\r\n        if (line.includes(prefix)) {\r\n          continue l\r\n        }\r\n      }\r\n\r\n      return parseIdentity(line)\r\n    }\r\n  }\r\n  return null\r\n}\r\n\r\nexport declare class Identity {\r\n  readonly name: string\r\n  readonly hash: string\r\n\r\n  constructor(name: string, hash: string)\r\n}\r\n\r\nconst _Identity = require(\"electron-osx-sign/util-identities\").Identity\r\n\r\nfunction parseIdentity(line: string): Identity {\r\n  const firstQuoteIndex = line.indexOf('\"')\r\n  const name = line.substring(firstQuoteIndex + 1, line.lastIndexOf('\"'))\r\n  const hash = line.substring(0, firstQuoteIndex - 1)\r\n  return new _Identity(name, hash)\r\n}\r\n\r\nexport function findIdentity(certType: CertType, qualifier?: string | null, keychain?: string | null): Promise<Identity | null> {\r\n  let identity = qualifier || process.env.CSC_NAME\r\n  if (isEmptyOrSpaces(identity)) {\r\n    if (isAutoDiscoveryCodeSignIdentity()) {\r\n      return _findIdentity(certType, null, keychain)\r\n    }\r\n    else {\r\n      return Promise.resolve(null)\r\n    }\r\n  }\r\n  else {\r\n    identity = identity!.trim()\r\n    for (const prefix of appleCertificatePrefixes) {\r\n      checkPrefix(identity, prefix)\r\n    }\r\n    return _findIdentity(certType, identity, keychain)\r\n  }\r\n}\r\n\r\nfunction checkPrefix(name: string, prefix: string) {\r\n  if (name.startsWith(prefix)) {\r\n    throw new InvalidConfigurationError(`Please remove prefix \"${prefix}\" from the specified name — appropriate certificate will be chosen automatically`)\r\n  }\r\n}"],"sourceRoot":""}
